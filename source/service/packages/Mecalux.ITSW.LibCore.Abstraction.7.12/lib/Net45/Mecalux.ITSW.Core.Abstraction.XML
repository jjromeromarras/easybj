<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mecalux.ITSW.Core.Abstraction</name>
    </assembly>
    <members>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo">
            <summary>
            This class provides information about the running application.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.SetApplicationAssembly(System.Reflection.Assembly)">
            <summary>
            Sets the application assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.GetProductName(System.Reflection.Assembly)">
            <summary>
            Gets the name of the product.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.GetVersion(System.Reflection.Assembly)">
            <summary>
            Gets the name of the product.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.GetCompany(System.Reflection.Assembly)">
            <summary>
            Gets the company.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.GetCopyright(System.Reflection.Assembly)">
            <summary>
            Gets the copyright.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.GetInformationalVersion(System.Reflection.Assembly)">
            <summary>
            Gets the informational version.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.GetTitle(System.Reflection.Assembly)">
            <summary>
            Gets the title.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.GetDescription(System.Reflection.Assembly)">
            <summary>
            Gets the description.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.ApplicationAssembly">
            <summary>
            Gets the main application assembly.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.ProductName">
            <summary>
            Gets the product name of the application.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.Version">
            <summary>
            Gets the version number of the application.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.Company">
            <summary>
            Gets the company of the application.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.Copyright">
            <summary>
            Gets the copyright information of the application.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.InformationalVersion">
            <summary>
            Gets the informational version.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.ApplicationPath">
            <summary>
            Gets the path for the executable file that started the application, not including the executable name.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ApplicationInfo.Title">
            <summary>
            Gets the title.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.GuidToStringConverter">
            <summary>
            Guid to/from string common converter.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.GuidToStringConverter.Convert(System.Nullable{System.Guid})">
            <summary>
            Converts the specified value to string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.GuidToStringConverter.ConvertBack(System.String)">
            <summary>
            Converts the back the string to Guid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.LongToStringConverter">
            <summary>
            Long to/from string common converter.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.LongToStringConverter.Convert(System.Nullable{System.Int64})">
            <summary>
            Converts the specified value to string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.LongToStringConverter.ConvertBack(System.String)">
            <summary>
            Converts the back the string to long.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.DecimalToStringConverter">
            <summary>
            Decimal to/from string common converter.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DecimalToStringConverter.Convert(System.Nullable{System.Decimal})">
            <summary>
            Converts the specified value to string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DecimalToStringConverter.ConvertBack(System.String)">
            <summary>
            Converts the back the string to decimal.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.BooleanToStringConverter">
            <summary>
            Boolean to/from string common converter.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.BooleanToStringConverter.Convert(System.Nullable{System.Boolean})">
            <summary>
            Converts the specified value to string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.BooleanToStringConverter.ConvertBack(System.String)">
            <summary>
            Converts the back the string to bool.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.DateTimeToStringConverter">
            <summary>
            DateTime to/from string common converter
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DateTimeToStringConverter.Convert(System.Nullable{System.DateTime})">
            <summary>
            Converts a date time to a standar string format.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            Given date time to Local time
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DateTimeToStringConverter.ConvertBack(System.String)">
            <summary>
            Converts the given string to date time.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>
            Given time to UTC
            </returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.Date">
            <summary>
            Represents a Date with no time info
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.Date.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.Date"/> class.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.Date.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.Date"/> class.
            </summary>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.Date.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.Date"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.Date.Today">
            <summary>
            Gets the today value.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.DelegateEqualityComparer`1">
            <summary>
            Provides a convenient method to create comparers based on a delegate method.
            </summary>
            <typeparam name="T">Type of the objects to compare.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DelegateEqualityComparer`1.#ctor(System.Func{`0,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.DelegateEqualityComparer`1"/> class.
            </summary>
            <param name="compFunc">The comp function.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DelegateEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Constructor. The given func will be used to compare instances
            and calculate hashes.
            </summary>
            <param name="compDelegate"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DelegateEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Calls the comparer specified on the constructor
            with the params provided.
            </summary>
            <param name="x">First instance</param>
            <param name="y">Second instance</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DelegateEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Calculates the hash for <paramref name="obj"/> with the
            hash delegate specified on the constructor.
            </summary>
            <param name="obj">Instance for which hash will be calculated</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary">
            <summary>
            A dynamic object that also implements some IDictionary methods.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary"/> class.
            </summary>
            <param name="initialValues">The initial values.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary"/> class.
            </summary>
            <param name="initialValues">The initial values.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.Get(System.String)">
            <summary>
            Gets the specified attribute value.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.Add(System.String,System.Object)">
            <summary>
            Adds the specified attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the specified attribute name exists.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.Item(System.String)">
            <summary>
            Gets or sets the value of one attribute.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.DynamicDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.Locker`1">
            <summary>
            Lock provider for a specified T type instances.
            Use: using (locker.GetLock(id)) { ... }
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.Locker`1.Lock(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.Locker`1"/> class.
            </summary>
            <param name="item">The item to lock on.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.Locker`1.Unlock(`0)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.Locker`1.UnlockAll">
            <summary>
            Unlocks all.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.Locker`1.GetLock(`0)">
            <summary>
            Gets the lock.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.Locker`1.GetLocks(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Gets the locks.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.Locker`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue">
            <summary>
            Object value with type.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue"/> class.
            </summary>
            <param name="objectType">Type of the object.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue"/> class.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue.SetTypeName(System.Type)">
            <summary>
            Sets the name of the type or string.empty is type is null.
            </summary>
            <param name="objectType">Type of the object.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ObjectValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.StringObjectValue">
            <summary>
            String ObjectValue
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.StringObjectValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.StringObjectValue"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.IErrorDetectionStrategy">
            <summary>
            Retry error detection strategy
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.IErrorDetectionStrategy.ShouldRetry(System.Exception)">
            <summary>
            Shoulds the retry.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.ExceptionTypeDetectionStrategy`1">
            <summary>
            ExceptionTypeDetectionStrategy
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ExceptionTypeDetectionStrategy`1.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ExceptionTypeDetectionStrategy`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.ExceptionTypeDetectionStrategy`1"/> class.
            </summary>
            <param name="checkAssignablesExceptions">set to false to check exact exception type.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ExceptionTypeDetectionStrategy`1.ShouldRetry(System.Exception)">
            <summary>
            Shoulds the retry.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.AnyErrorDetectionStrategy">
            <summary>
            Any error retry strategy
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.IDelayStrategy">
            <summary>
            Delay strategy
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.IDelayStrategy.CalculateDelay(System.Int32)">
            <summary>
            Calculates the delay between (re)tries.
            </summary>
            <param name="retryNumber">Next retry number. Starts at 1. The first retry
            is the one that follows the first failed attempt to execute the action</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.ConstantDelayStrategy">
            <summary>
            Delay strategy that uses constant delay
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ConstantDelayStrategy.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.ConstantDelayStrategy"/> class.
            </summary>
            <param name="retryInterval">The retry interval.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ConstantDelayStrategy.CalculateDelay(System.Int32)">
            <summary>
            Calculates the delay between (re)tries.
            </summary>
            <param name="retryNumber">Next retry number. Starts at 1. The first retry
            is the one that follows the first failed attempt to execute the action</param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ConstantDelayStrategy.RetryInterval">
            <summary>
            Gets or sets the retry interval.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.ExponentialDelayStrategy">
            <summary>
            Delay strategy that uses exponential delay
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ExponentialDelayStrategy.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Constructor
            </summary>
            <param name="baseFactor">The base factor.</param>
            <param name="retryInterval">The retry interval.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ExponentialDelayStrategy.#ctor(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.ExponentialDelayStrategy"/> class.
            </summary>
            <param name="baseFactor">The base factor.</param>
            <param name="retryInterval">The retry interval.</param>
            <param name="maxDelay">The maximum delay.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ExponentialDelayStrategy.CalculateDelay(System.Int32)">
            <summary>
            Calculates the delay between (re)tries.
            </summary>
            <param name="retryNumber">Next retry number. Starts at 1. The first retry
            is the one that follows the first failed attempt to execute the action</param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ExponentialDelayStrategy.Base">
            <summary>
            Base of the pow
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ExponentialDelayStrategy.RetryInterval">
            <summary>
            Gets or sets the retry interval.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.ExponentialDelayStrategy.MaxDelay">
            <summary>
            Gets or sets the maximum delay.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy">
            <summary>
            Retry action class.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.NoRetry">
            <summary>
            The no retry
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.AnyExceptionDetectionStrategy">
            <summary>
            Retries when any exception occurs
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.#ctor(Mecalux.ITSW.Core.Abstraction.Common.IErrorDetectionStrategy,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy"/> class. Uses <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.ConstantDelayStrategy"/>
            as delay strategy
            </summary>
            <param name="errorDetectionStrategy">The error detection strategy.</param>
            <param name="retryCount">The retry count.</param>
            <param name="retryInterval">The retry interval.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.#ctor(Mecalux.ITSW.Core.Abstraction.Common.IErrorDetectionStrategy,Mecalux.ITSW.Core.Abstraction.Common.IDelayStrategy,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy"/> class.
            </summary>
            <param name="errorDetectionStrategy">The error detection strategy.</param>
            <param name="delayStrategy">The delay strategy.</param>
            <param name="retryCount">The retry count.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAction(System.Action)">
            <summary>
            Executes the action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAction(System.Action{System.Int32})">
            <summary>
            Executes the action. The argument of the action will be the attempt number (0 for the first attempt)
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAction``1(System.Func{``0})">
            <summary>
            Executes the action.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAction``1(System.Func{System.Int32,``0})">
            <summary>
            Executes the action. The argument of the fun will be the attempt number (0 for the first attempt)
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The function.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAsync(System.Action)">
            <summary>
            Executes the asynchronous.
            </summary>
            <param name="taskAction">The task action.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAsync(System.Action{System.Int32})">
            <summary>
            Executes the asynchronous. The argument of the action will be the attempt number (0 for the first attempt)
            </summary>
            <param name="taskAction">The task action.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAsync(System.Action,System.Threading.CancellationToken)">
            <summary>
            Executes the asynchronous.
            </summary>
            <param name="taskAction">The task action.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAsync(System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Executes the asynchronous. The argument of the action will be the attempt number (0 for the first attempt)
            </summary>
            <param name="taskAction">The task action.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAsync``1(System.Func{``0})">
            <summary>
            Executes the asynchronous. The argument of the func will be the attempt number (0 for the first attempt)
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskFunc">The task function.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAsync``1(System.Func{System.Int32,``0})">
            <summary>
            Executes the asynchronous. The argument of the func will be the attempt number (0 for the first attempt)
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskFunc">The task function.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAsync``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Executes the asynchronous.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskFunc">The task function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.ExecuteAsync``1(System.Func{System.Int32,``0},System.Threading.CancellationToken)">
            <summary>
            Executes the asynchronous. The argument of the func will be the attempt number (0 for the first attempt)
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="taskFunc">The task function.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Common.RetryPolicy.Retrying">
            <summary>
            The retrying action. Parameters: CurrentRetryCount, Delay, LastException
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.OracleSetting">
            <summary>
            Represents a oracle connection setting
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.OracleSetting.InitializeSizes">
            <summary>
            Indicates if table and index sizes have to be configured
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.BinaryReaderExtensions">
            <summary>
            Extension methods for 'BinaryReader'.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.BinaryReaderExtensions.ReadAsciiPrefixedString(System.IO.BinaryReader)">
            <summary>
            Reads an string prefixed with its length in a 4-bytes word.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.BinaryReaderExtensions.ReadUTF8PrefixedString(System.IO.BinaryReader)">
            <summary>
            Reads an UTF-8 string prefixed with its length in a 4-bytes word.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.BinaryReaderExtensions.ReadUnicodePrefixedString(System.IO.BinaryReader)">
            <summary>
            Reads an unicode prefixed string.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.BinaryWriterExtensions">
            <summary>
            Extension methods for 'BinaryWriter'.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.BinaryWriterExtensions.WriteAsciiPrefixedString(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes an ascii string prefixed with its length in a 4-bytes word.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.BinaryWriterExtensions.WriteUTF8PrefixedString(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes an UTF-8 string prefixed with its length in a 4-bytes word.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.BinaryWriterExtensions.WriteUnicodePrefixedString(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes an unicode prefixed string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.DecimalExtensions">
            <summary>
            Extension methods for 'decimal'.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.DecimalExtensions.Pow(System.Decimal,System.Int64)">
            <summary>
            Returns a specified number raised to the specified power.
            When result exceeded Decimal.MaxValue then it returns Decimal.MaxValue
            When result exceeded Decimal.MinValue then it returns Decimal.MinValue
            </summary>
            <param name="baseValue">The base value.</param>
            <param name="power">The exponent.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.DecimalExtensions.DivSecure(System.Decimal,System.Decimal)">
            <summary>
            Secure Division returns the result of divide dividend/divisor
            When divisor is zero it returns Decimal.MaxValue except if dividend is also zero,
            in this case it returns 1
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.DecimalExtensions.DivSecure(System.Decimal,System.Int64)">
            <summary>
            Secure Division returns the result of divide dividend/divisor
            When divisor is zero it returns Decimal.MaxValue except if dividend is also zero,
            in this case it returns 1
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.DecimalExtensions.Sqrt(System.Decimal)">
            <summary>
            Returns the square root of the decimal target value
            It uses the Math.Sqrt by casting the value to double and then to decimal again.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.ExpandoObjectExtensions">
            <summary>
            Extension methods for 'ExpandoObject'.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpandoObjectExtensions.GetExpandoObjectValue(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Gets the expando object variable/item value.
            </summary>
            <param name="obj">The expando object.</param>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpandoObjectExtensions.Map``1(System.Dynamic.ExpandoObject,``0)">
            <summary>
            Maps the expando object into the specified destination object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpandoObjectExtensions.ToFormattedString(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> with this instance keys and values.
            </summary>
            <param name="obj">The obj.</param>
            <param name="expandoObjectName">Name of the expando object.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpandoObjectExtensions.ToFormattedString(System.Dynamic.ExpandoObject)">
            <summary>
            Returns a <see cref="T:System.String"/> with this instance keys and values.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.ExceptionExtensions">
            <summary>
            Extension methods for 'Exception'.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExceptionExtensions.SetData(System.Exception,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds all key-values to exception data. If the exception already has data for any of those
            keys, it will be overwritten. Th rest of the data is preserved
            </summary>
            <param name="exception">Exception</param>
            <param name="data">data</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.TimeSpanExtensions">
            <summary>
            Extensions methods (for 'int', 'double') that return 'TimeSpan' object.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.ReadWriteLocker`1">
            <summary>
            Read write lock provider for a specified T type instances.
            Allows many readers to lock on the same T, but just writers are
            universally exclusive.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ReadWriteLocker`1.EnterReadLock(`0)">
            <summary>
            Tries to enter the lock in read mode.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ReadWriteLocker`1.ExitReadLock(`0)">
            <summary>
            Reduces the recursion count for read mode, and exits read mode if the resulting count is 0 (zero).
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ReadWriteLocker`1.EnterWriteLock(`0)">
            <summary>
            Tries to enter the lock in write mode.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ReadWriteLocker`1.ExitWriteLock(`0)">
            <summary>
            Reduces the recursion count for write mode, and exits write mode if the resulting count is 0 (zero).
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.ReadWriteLocker`1.Dispose">
            <summary>
            Disposes locker
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Testing.SourceCategoryTest">
            <summary>
            Static class defining all different source category test types
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.SourceCategoryTest.Process">
            <summary>
            Source category type "Process"
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.SourceCategoryTest.UI">
            <summary>
            Source category type "UI"
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.SourceCategoryTest.Config">
            <summary>
            Source category type "Config"
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Testing.TimeCategoryTest">
            <summary>
            Static class defining all different time interval category test types
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TimeCategoryTest.Continuous">
            <summary>
            Time category type "Continuous"
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TimeCategoryTest.Daily">
            <summary>
            Time category type "Daily"
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TimeCategoryTest.Weekly">
            <summary>
            Time category type "Weekly"
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest">
            <summary>
            Static class defining all different type category test types
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.UnitTest">
            <summary>
            Type category type "UnitTest"
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.IntegrationTest">
            <summary>
            Type category type "IntegrationTest"
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.AceptationTest">
            <summary>
            Type category type "AceptationTest"
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.PerformanceTest">
            <summary>
            Type category type "PerformanceTest"
            Test in this category determine how the system performs or measures its resources usage.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.ManualTest">
            <summary>
            Type category type "ManualTest"
            Test in this category are meant to be executed with manual assistance.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.StressTest">
            <summary>
            Type category type "StressTest"
            Test in this category seek to check the system reliability under unexpected or rare workloads.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.LoadTest">
            <summary>
            Type category type "LoadTest"
            Test in this category try to determine that the system can continue to operate under a specific load, whether that be large quantities of data or users
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.DestructiveTest">
            <summary>
            Type category type "DestructiveTest"
            Test in this category attempts to cause the system to fail. They should verify that the system works properly even when it receives invalid or unexpected inputs, thereby establishing the robustness of input validation and error-management.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.ScalabilityTest">
            <summary>
            Type category type "ScalabilityTest"
            Test in this category check system response when certain components or workload increase radically in size.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.StabilityTest">
            <summary>
            Type category type "StabilityTest"
            Test in this category checks if the system can continuously function well in or above an acceptable time period.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.SecurityTest">
            <summary>
            Type category type "SecurityTest"
            Test in this category seek flaws in security mechanisms that protect data from non-trusted agents.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Testing.TypeCategoryTest.LocalizationTest">
            <summary>
            Type category type "LocalizationTest"
            Test in this category verify that the system works after been translated into a new language or adapted for a new culture (such as different currencies or time zones).
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.LockProvider`1">
            <summary>
            A helper class that provides lock objects for a specified T type instances.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.LockProvider`1.GetLock(`0)">
            <summary>
            Gets the lock fot the instance.
            </summary>
            <param name="lockObject">The lock object.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.LockProvider`1.RemoveLock(`0)">
            <summary>
            Removes the lock.
            </summary>
            <param name="lockObject">The lock object.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.LockProvider`1.ExecuteSync(`0,System.Action)">
            <summary>
            Executes the action after getting the lock for this instance.
            </summary>
            <param name="lockObject">The lock object.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.LockProvider`1.ExecuteSync``1(`0,System.Func{``0})">
            <summary>
            Executes the function after getting the lock for this instance.
            </summary>
            <typeparam name="TReturn">The type of the returned object.</typeparam>
            <param name="lockObject">The lock object.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.ConnectionSetting">
            <summary>
            Represents a database connection setting
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.ConnectionSetting.Oracle">
            <summary>
            Gets or sets the oracle setting
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.ConnectionSettingsCollection">
            <summary>
            Represents a colllection of connection settings
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.CryptographyProtectedConfigurationProvider">
            <summary>
            Class to Encrypt/Decrypt a configuration section
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting">
            <summary>
            Represents a Tenant configuration
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting"/> class.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.AuditEnabled">
            <summary>
            Gets or sets a value indicating whether audit is enabled.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.EventStoreConnection">
            <summary>
            Gets or sets the event store connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.SnapshotStoreConnection">
            <summary>
            Gets or sets the snapshot store connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.CommandStoreConnection">
            <summary>
            Gets or sets the command store connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.BlobStoreConnection">
            <summary>
            Gets or sets the Blob store connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.ProcessStoreConnection">
            <summary>
            Gets or sets the process store connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.ADDatabaseConnection">
            <summary>
            Gets or sets the AD database connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.ReadDatabaseConnection">
            <summary>
            Gets or sets the read database connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.DataWarehouseConnection">
            <summary>
            Gets or sets the data warehouse connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.Lucene">
            <summary>
            Gets or sets the lucene configuration
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.Processes">
            <summary>
            Gets or sets the processes.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.Telemetry">
            <summary>
            Gets or sets the telemetry.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.Urls">
            <summary>
            Gets or sets the urls information.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.Saml2">
            <summary>
            Gets or sets the saml information.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.AppSettings">
            <summary>
            App settings for the tenant
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting.Keys">
            <summary>
            Gets or sets the keys information.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSettingCollection">
            <summary>
            Represents a colllection of tenants
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSettingCollection.CreateNewElement">
             <summary>
            
             </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSettingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSettingCollection.Add(Mecalux.ITSW.Core.Abstraction.Configuration.TenantSetting)">
            <summary>
            Adds the specified tenant setting.
            </summary>
            <param name="tenantSetting">The tenant setting.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSettingCollection.Item(System.Guid)">
             <summary>
            
             </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantSettingCollection.Item(System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.LuceneSetting">
            <summary>
            Represents a Lucene configuration
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.LuceneSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Configuration.LuceneSetting"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.LuceneSetting.PostDeserialize">
             <summary>
            
             </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.LuceneSetting.Directory">
            <summary>
            Gets or sets the directory.
            </summary>
            <value>
            The directory.
            </value>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.ProcessesSetting">
            <summary>
            Represents a Processes configuration
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.ProcessesSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Configuration.ProcessesSetting"/> class.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.ProcessesSetting.LogonApplicationName">
            <summary>
            Gets or sets the name of the logon application.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.ProcessesSetting.LogonProcessName">
            <summary>
            Gets or sets the name of the logon process.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.ProcessesSetting.MainApplicationName">
            <summary>
            Gets or sets the name of the main application.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.ProcessesSetting.MainProcessName">
            <summary>
            Gets or sets the name of the main process.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.TelemetrySetting">
            <summary>
            Represents a Telemetry configuration
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.TelemetrySetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Configuration.TelemetrySetting"/> class.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TelemetrySetting.Key">
            <summary>
            Gets or sets the telemetry key.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TelemetrySetting.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.UrlsSetting">
            <summary>
            Represents Urls information
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.UrlsSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Configuration.UrlsSetting"/> class.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.UrlsSetting.STS">
            <summary>
            Gets or sets the STS base url.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.UrlsSetting.SmartUIAngular">
            <summary>
            Gets or sets the smart UI angular base url.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.Saml2Setting">
            <summary>
            Represents Saml2 information
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.Saml2Setting.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.Saml2Setting.Url">
            <summary>
            Gets or sets the STS base url.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.Saml2Setting.Issuer">
            <summary>
            Gets or sets the saml2 issuer.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.Saml2Setting.CertificateFileName">
            <summary>
            Gets or sets the name of the saml2 certificate file.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.Saml2Setting.CertificateThumbPrint">
            <summary>
            Gets or sets the saml2 certificate thumb print.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.KeysSetting">
            <summary>
            Represents Keys information
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.KeysSetting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Configuration.KeysSetting"/> class.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.KeysSetting.LicenseInfoApiPublicKey">
            <summary>
            Gets or sets the STS base url.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.TenantsSection">
            <summary>
            Configuration section for tenants settings
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.TenantsSection.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            Gets a value indicating whether an unknown attribute is encountered during deserialization.
            </summary>
            <param name="name">The name of the unrecognized attribute.</param>
            <param name="value">The value of the unrecognized attribute.</param>
            <returns>
            true when an unknown attribute is encountered while deserializing; otherwise, false.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.TenantsSection.GetTenantsFromConfig">
            <summary>
            Gets the tenants region from app config file. Tenant region name must be "tenants"
            </summary>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">If config file is wrong or other reasons.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Configuration.TenantsSection.GetTenantsFromXml(System.String)">
            <summary>
            Gets the tenants region from a tenant XML file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
            <exception cref="T:System.ArgumentNullException">If filename is a null or empty string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in filename was not found.</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">If xml file is wrong or other reasons.</exception>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Configuration.TenantsSection.Tenants">
            <summary>
            Gets or sets the tenants.
            </summary>
            <value>
            The tenants.
            </value>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException">
            <summary>
            Base Exception for all internal exceptions
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException"/> class.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="solution">The solution that should be tried.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="solution">The solution that should be tried.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Exceptions.BaseException.Solution">
            <summary>
            Tip on how to solve the problem
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Exceptions.CryptographyException">
            <summary>
            Cryptography Exception
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Exceptions.DatabaseException">
            <summary>
            Database Exception
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException.#ctor(System.Type,System.Exception)">
            <summary>
            
            </summary>
            <param name="service"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="nameToCheck">The name to check.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="nameToCheck">The name to check.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>
            The type of the service.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException.NameTocheck">
            <summary>
            Gets or sets the name to check.
            </summary>
            <value>
            The name to check.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogCostInfo.Level">
            <summary>
            Gets or sets the level.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogCostInfo.TimeStamp">
            <summary>
            Gets or sets the time stamp.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogCostInfo.MessageFunc">
            <summary>
            Gets or sets the function to build the message.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogCostInfo.Data">
            <summary>
            Gets or sets the context.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogCostInfo.Cost">
            <summary>
            Gets or sets the cost.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.LogTarget">
            <summary>
            A customized log target base class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogTarget.Write(Mecalux.ITSW.Core.Abstraction.LogEventInfo)">
            <summary>
            Writes the specified log event.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogTarget.WriteCost(Mecalux.ITSW.Core.Abstraction.LogCostInfo)">
            <summary>
            Writes the specified log cost.
            </summary>
            <param name="costInfo">The cost information.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogTarget.CanWrite">
            <summary>
            Gets or sets a value indicating whether this instance can write log messages.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogTarget.CanWriteCost">
            <summary>
            Gets or sets a value indicating whether this instance can write cost log messages.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Common.DisposableAction">
            <summary>
            A helper class that executes an Action when the class is disposed.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Common.DisposableAction"/> class.
            </summary>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="action"/> is null</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Common.DisposableAction.Dispose">
            <summary>
            Execute the relevant actions
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.DynamicExtensions">
            <summary>
            Extensions methods for IDictionary.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.DynamicExtensions.HasProperty(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            Determines whether the specified IDictionary has a property.
            </summary>
            <param name="value">The value.</param>
            <param name="property">The property.</param>
            <returns>
              <c>true</c> if the specified IDictionary has property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions">
            <summary>
            Extension methods for 'Expression' and 'LambdaExpression'.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of the property been accessed
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Expression is not a Property - expression</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of the property been accessed
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetPropertyType``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the type of the property been accessed
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetPropertyNamePath``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property name path joined with '.'
            i.e. "p => p.Data.Text" returns "Data.Text"
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetPropertiesInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the properties information.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetPropertyNames``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property names.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetPropertiesInfo``1(System.String)">
            <summary>
            Gets the property information from path string (i.e: 'Data.Text.Value')
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If a property in path is not found</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetPropertiesExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Creates an expression that is the result of accessing <paramref name="path"/> properties on <paramref name="expression"/>
            </summary>
            <param name="expression">Expression</param>
            <param name="path">Properties path</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.ForEach(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Creates an expression that iterates over a collection performing certain actions
            </summary>
            <param name="collection">Expression of the collection to be iterated</param>
            <param name="loopVar">Loop variable</param>
            <param name="body">Loop body</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetterDelegate``2(System.String)">
            <summary>
            Createa a getter delegate for the property.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="propertyPath">The property path.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetterDelegate``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Createa a getter delegate for the last property info.
            Returns default(T) if it is a sub property path and subproperty value is null.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetterDelegate``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Getters the delegate.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetterExpression``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Createa a getter expression for the last property info.
            The expression returns default(T) if it is a sub property path and subproperty value is null.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="properties">The properties.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetterExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Createa a getter expression for given expression.
            The expression returns default(T) if it is a sub property path and subproperty value is null.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.SetterDelegate``2(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Returns an action that allows to set a property that has no available setter.
            </summary>
            <typeparam name="TInstance">Instance type</typeparam>
            <typeparam name="TProperty">Property type</typeparam>
            <param name="properties">Indicates the property</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.SetterDelegate``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns an action that allows to set a property that has no available setter.
            </summary>
            <typeparam name="TInstance">Instance type</typeparam>
            <typeparam name="TProperty">Property type</typeparam>
            <param name="propertyExpression">Indicates the property</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ExpressionExtensions.GetSetMethodOnDeclaringType(System.Reflection.PropertyInfo)">
            <summary>
            Gets the set method (public or not) of <paramref name="propertyInfo"/> on the property declaring type.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.IServiceLocator">
            <summary>
            Service Locator interface. It wrapp a IoC
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Resolve``1">
            <summary>
            Resolve an instance of the default requested type from the container
            </summary>
            <typeparam name="T">Type to resolve</typeparam>
            <returns>The instance of the object</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Resolve``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolve an instance of the default requested type from the container with the specified constructor parameters.
            </summary>
            <typeparam name="T">Type to resolve</typeparam>
            <param name="constructorParameters">The constructor parameters.</param>
            <returns>The instance of the object</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Resolve``1(System.String)">
            <summary>
            Resolve an instance of the requested type with the given name from the container.
            </summary>
            <typeparam name="T">Type to resolve</typeparam>
            <param name="name">Name of the object to retrive</param>
            <returns>The instance of the object</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Resolve``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolve an instance of the requested type with the given name from the container.
            </summary>
            <typeparam name="T">Type to resolve</typeparam>
            <param name="name">Name of the object to retrive</param>
            <param name="constructorParameters">The constructor parameters.</param>
            <returns>The instance of the object</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Resolve(System.Type)">
            <summary>
            Resolve an instance of the requested type
            </summary>
            <param name="type">Type to resolve</param>
            <returns>The instanace of the object</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Resolve(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Resolve an instance of the requested type with a constructor with parameters
            </summary>
            <param name="type">The type.</param>
            <param name="constructorParameters">The constructor parameters.</param>
            <returns>The instanace of the object</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.ResolveServices``1">
            <summary>
            Return instances of all registered types requested
            <remarks>
            This method is useful if you've registered multiple types with the same System.Type but different names.
            Be aware that this method does NOT return an instanace for the default (unnamed) registration
            </remarks>
            </summary>
            <typeparam name="T">Type requested</typeparam>
            <returns>IList of the objects of type T</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.ResolveServices``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Return instances of all registered types requested
            </summary>
            <typeparam name="T">Type requested</typeparam>
            <param name="constructorParameters">The constructor parameters.</param>
            <returns>IList of the objects of type T</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register``1(System.Type)">
            <summary>
            Register a type with specific target type
            </summary>
            <typeparam name="TInterface">Source type or interface</typeparam>
            <param name="implType">Target type to be returned</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register``2">
            <summary>
            Registers a type with a target type
            </summary>
            <typeparam name="TInterface">Source type or interface</typeparam>
            <typeparam name="TImplementation">Target type to be returned</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register``2(System.Object[])">
            <summary>
            Registers a type with specified constructor matching parameter values.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="constructorParamValues">The constructor parameter values. To use default constructor use 'new object[0]'.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register``2(System.String)">
            <summary>
            Registers a type with a specific target type and name.
            </summary>
            <typeparam name="TInterface">Source type or interface</typeparam>
            <typeparam name="TImplementation">Target type to be returned</typeparam>
            <param name="name">Name of the target</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register``2(System.String,System.Object[])">
            <summary>
            Registers a type with a specific target type, name and specified constructor matching parameter values.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <param name="name">The name.</param>
            <param name="constructorParamValues">The constructor parameter values. To use default constructor use 'new object[0]'.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register(System.String,System.Type)">
            <summary>
            Registers the specified name with a target type
            </summary>
            <param name="name">Name</param>
            <param name="type">Target type</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register(System.Type,System.Type,System.Object[])">
            <summary>
            Registers the specified type with a target type and specified constructor matching parameter values.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="implType">Type of the implementation.</param>
            <param name="constructorParamValues">The constructor parameter values. To use default constructor use 'new object[0]'.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register(System.String,System.Type,System.Type,System.Object[])">
            <summary>
            Registers the specified name and type with a target type and specified constructor matching parameter values.
            </summary>
            <param name="name">The name.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="implType">Type of the implementation.</param>
            <param name="constructorParamValues">The constructor parameter values.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register(System.String,System.Type,System.Type,System.Tuple{System.Type,System.Object}[])">
            <summary>
            Registers the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="serviceType">Type of the service.</param>
            <param name="implType">Type of the implementation.</param>
            <param name="constructorParamValues">The constructor parameter values.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register``1(``0)">
            <summary>
            Registers a type or interface to specified object instance.
            </summary>
            <typeparam name="TInterface">Source type or interface</typeparam>
            <param name="instance">Target object instance</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register``1(System.String,``0)">
            <summary>
            Registers a type or interface to specified object instance and name
            </summary>
            <typeparam name="TInterface">Source type or interface</typeparam>
            <param name="name">The name</param>
            <param name="instance">Target instance</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register``1(System.Func{``0})">
            <summary>
            Registers a type or interface to specified factory method
            </summary>
            <typeparam name="TInterface">Source type or interface</typeparam>
            <param name="factoryMethod">Target factory method</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Register``1(System.String,System.Func{System.String,``0})">
            <summary>
            Registers the specified name.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="name">The name.</param>
            <param name="factoryMethod">The factory method.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.RegisterAll``1(System.String)">
            <summary>
            Registers all types included in the assembly that implement the interface.
            </summary>
            <typeparam name="TInterface">Source type or interface</typeparam>
            <param name="assemblyString">The assembly string.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.RegisterAll``1(System.Type[])">
            <summary>
            Registers all types in parameter array that implement the interface.
            </summary>
            <typeparam name="TInterface">The type of the interface</typeparam>
            <param name="types">The types.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Inject``1(``0)">
            <summary>
            Passes the existing object of type TService through the container and performs all configured injection upon it.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.RemoveValue(System.Type)">
            <summary>
            Removes the value for the type registration
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.RemoveValue(System.String,System.Type)">
            <summary>
            Removes the value for the type registration and name.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.HasValue(System.Type)">
            <summary>
            Determines whether the specified type registration has value.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type has value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.Reset">
            <summary>
            Disposes the current container and creates a new one. 
            All instances are unregistered.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified type to check is registered.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns>
              <c>true</c> if the specified type to check is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.IsRegistered(System.Type,System.String)">
            <summary>
            Determines whether the specified type to check is registered.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <param name="nameToCheck">The name to check.</param>
            <returns>
              <c>true</c> if the specified type to check is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.IsRegistered``1">
            <summary>
            Determines whether this instance is registered.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.IServiceLocator.IsRegistered``1(System.String)">
            <summary>
            Determines whether the specified name to check is registered.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nameToCheck">The name to check.</param>
            <returns>
              <c>true</c> if the specified name to check is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.ITypeCatalog">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ITypeCatalog.GetDerivedTypes(System.Type)">
            <summary>
            Gets the derived types.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ITypeCatalog.GetDerivedTypes``1">
            <summary>
            Gets the derived types.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ITypeCatalog.GetGenericInterfaceImplementations(System.Type)">
            <summary>
            Gets the generic interface implementations.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ITypeCatalog.GetInterfaceImplementations(System.Type)">
            <summary>
            Gets the interface implementations.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ITypeCatalog.GetInterfaceImplementations``1">
            <summary>
            Gets the interface implementations.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.ITypeCatalog.LoadedTypes">
            <summary>
            Gets the loaded types.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.MappedNestedContext">
            <summary>
            Mapped Diagnostic Nested Context information
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.MappedNestedContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.MappedNestedContext"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.MappedNestedContext.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.String,System.String},System.Boolean,System.Func{System.String},Mecalux.ITSW.Core.Abstraction.LogLevel,System.Int32,System.Nullable{System.Int32},Mecalux.ITSW.Core.Abstraction.MappedNestedContext,System.Action{Mecalux.ITSW.Core.Abstraction.MappedNestedContext})">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.MappedNestedContext"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <param name="costMessage">The cost message.</param>
            <param name="costLogLevel">The log level.</param>
            <param name="timer">The timer.</param>
            <param name="timerLimit">The timer limit.</param>
            <param name="previous">The previous.</param>
            <param name="disposeAction">The dispose action.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.MappedNestedContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.MappedNestedContext.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.MappedNestedContext.Cost">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Mecalux.ITSW.Core.Abstraction.MappedNestedContext"/> is cost.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.MappedNestedContext.CostMessage">
            <summary>
            Gets or sets the cost message.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.MappedNestedContext.CostLogLevel">
            <summary>
            Gets the log level.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.MappedNestedContext.Timer">
            <summary>
            Gets or sets the timer.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.MappedNestedContext.TimerLimit">
            <summary>
            Gets or sets the timer limit.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.ConsoleUtil">
            <summary>
            System console utility class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.ConsoleUtil.WriteLineGreen(System.String,System.Object[])">
            <summary>
            Writes green text to the console.
            </summary>
            <param name="text">The text.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.ConsoleUtil.WriteLineRed(System.String,System.Object[])">
            <summary>
            Writes red text to the console.
            </summary>
            <param name="text">The text.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.ConsoleUtil.WriteLineYellow(System.String,System.Object[])">
            <summary>
            Writes yellow text to the console.
            </summary>
            <param name="text">The text.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.ConsoleUtil.WriteLine(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes out text with the specified ConsoleColor.
            </summary>
            <param name="color">The color.</param>
            <param name="text">The text.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.ConsoleUtil.Write(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes out text with the specified ConsoleColor.
            </summary>
            <param name="color">The color.</param>
            <param name="text">The text.</param>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.ConsoleUtil.GetCommandLineArguments(System.String[])">
            <summary>
            Returns a Dictionary with command line arguments.
            Keys = arguments that starts with '\' in lowercase.
            Values = next key argument o string.Empty if there is no next argument.
            </summary>
            <param name="args">The arguments. With format '\arg value' where value can be null.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.ConsoleUtil.GetCommandLineArguments(System.String[],System.String)">
            <summary>
            Returns a Dictionary with command line arguments.
            Keys = arguments that starts with '\' in lowercase.
            Values = next key argument o string.Empty if there is no next argument.
            </summary>
            <param name="args">The arguments.</param>
            <param name="argPrefix">The argument prefix.i.e. '-' if args are like '-p xx</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.PerfCounters">
            <summary>
            Performance counters query class
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.PerfCounters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.Utils.PerfCounters"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.PerfCounters.GetCurrentCpuUsage">
            <summary>
            Gets the current cpu usage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.PerfCounters.GetAvailableRAM">
            <summary>
            Gets the available ram.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.Progress">
            <summary>
            Progress utils
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Progress.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Int32},System.Int32)">
            <summary>
            Iterates over <paramref name="collection"/> executing <paramref name="body"/> for each element of the collection. Every <paramref name="numElementsUntilCallBack"/>th
            element, <paramref name="progressCallBack"/> will be called passing the number of elements of <paramref name="collection"/> iterated until then.
            </summary>
            <typeparam name="TSource">Source type</typeparam>
            <param name="collection">Source collection</param>
            <param name="body">Action to perform for each element</param>
            <param name="progressCallBack">Action to perform every <paramref name="numElementsUntilCallBack"/>th element</param>
            <param name="numElementsUntilCallBack">Elements to process before calling <paramref name="numElementsUntilCallBack"/></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Progress.ParallelForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1},System.Action{System.Int32},System.Int32)">
            <summary>
            Iterates over <paramref name="collection"/> using a parallel loop, executing <paramref name="body"/> for each element of the collection. Every <paramref name="numElementsUntilCallBack"/>th
            element, <paramref name="progressCallBack"/> will be called passing the number of elements of <paramref name="collection"/> iterated until then.
            </summary>
            <typeparam name="TSource"> The type of the data in the source.</typeparam>
            <typeparam name="TLocal">The type of the thread-local data</typeparam>
            <param name="collection">An enumerable data source</param>
            <param name="parallelOptions">An object that configures the behavior of this operation.</param>
            <param name="localInit">The function delegate that returns the initial state of the local data for each task.</param>
            <param name="body">The delegate that is invoked once per iteration.</param>
            <param name="localFinally">The delegate that performs a final action on the local state of each task.</param>
            <param name="progressCallBack">Action to perform every <paramref name="numElementsUntilCallBack"/>th element</param>
            <param name="numElementsUntilCallBack">Elements to process before calling <paramref name="numElementsUntilCallBack"/></param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.TaskExecution">
            <summary>
            Task execution utility class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TaskExecution.Delay(System.Int32)">
            <summary>
            Starts a Task that will complete after the specified due time.
            </summary>
            <param name="dueTime">The delay in milliseconds before the returned task completes.</param>
            <returns>
            The timed Task.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TaskExecution.Delay(System.TimeSpan)">
            <summary>
            Starts a Task that will complete after the specified due time.
            </summary>
            <param name="dueTime">The TimeSpan delay before the returned task completes.</param>
            <returns>The timed Task.</returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.TThreadPriority">
            <summary>
            Thread priority
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.TThreadPriority.TPIdle">
            <summary>
            Idle priority
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.TThreadPriority.TPLowest">
            <summary>
            Lowest priority
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.TThreadPriority.TPLower">
            <summary>
            Lower priority
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.TThreadPriority.TPNormal">
            <summary>
            Normal priority
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.TThreadPriority.TPHigher">
            <summary>
            Higher priority
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.TThreadPriority.TPHighest">
            <summary>
            Highest priority
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.TThreadPriority.TPTimeCritical">
            <summary>
            Critical priority
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.TThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.#ctor(System.Boolean)">
            <summary>
            TThread constructor
            </summary>
            <param name="createSuspended">if TRUE, thread is created in suspended mode and a Resume call is needed to begin the execution. If FALSE, thread stats at this time</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.#ctor(System.String,System.Boolean)">
            <summary>
            TThread constructor
            </summary>
            <param name="aName">string to identify the thread in the logs</param>
            <param name="createSuspended">if TRUE, thread is created in suspended mode and a Resume call is needed to begin the execution. If FALSE, thread stats at this time</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.Resume">
            <summary>
            Starts the thread if it is suspended
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.Terminate">
            <summary>
            Sets the Terminated property to TRUE, but it does not terminate the execution
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.Restart(System.Boolean)">
            <summary>
            Re-executes this instance if terminated.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.WaitFor">
            <summary>
            Blocks until the thread terminates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.WaitFor(System.Int32,System.Boolean@)">
            <summary>
            Blocks until the thread terminates or the specified time elapses
            </summary>
            <param name="miliseconds"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.Kill">
            <summary>
            Aborts this instance.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.Execute">
            <summary>
            Body of the thread execution. This function must be overloaded in the derived class to implement the logic of the thread.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.InitializeThread(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="aName"></param>
            <param name="createSuspended"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.TThread.ThreadFunc">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.TThread.Terminated">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.TThread.ReturnValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.TThread.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.TThread.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.TThread.Suspended">
            <summary>
            Gets a value indicating whether this <see cref="T:Mecalux.ITSW.Core.Abstraction.TThread"/> was never executed. Value is true if it is waiting for execution/resume.
            </summary>
            <value>
              <c>true</c> if suspended; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.TThread.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.TThread.ThreadFinished">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.ILog">
            <summary>
            Log interface
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILog.IsLevelEnabled(Mecalux.ITSW.Core.Abstraction.LogLevel)">
            <summary>
            Determines whether [is level enabled] [the specified log level].
            </summary>
            <param name="logLevel">The log level.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILog.Log(Mecalux.ITSW.Core.Abstraction.LogLevel,System.Func{System.String})">
            <summary>
            Log information to the targets. This is the base method that is extended via extension methods
            </summary>
            <param name="logLevel">Log Level of the message</param>
            <param name="messageFunc">How to compose the message</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILog.Log``1(Mecalux.ITSW.Core.Abstraction.LogLevel,System.Func{System.String},``0)">
            <summary>
            Log information to the targets. This is the base method that is extended via extension methods
            </summary>
            <typeparam name="TException">Exception to log</typeparam>
            <param name="logLevel">Log Level of the message</param>
            <param name="messageFunc">How to compose the message</param>
            <param name="exception">Exception to trace</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILog.Log(Mecalux.ITSW.Core.Abstraction.LogLevel,System.Func{System.String},System.Func{System.String})">
            <summary>
            Log information to the targets with specific context info.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="contextFunc">The context function.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.ILog.IsTraceEnabled">
            <summary>
            Returns true if Trace is enabled
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.ILog.IsDebugEnabled">
            <summary>
            Returns true if Debug is enabled
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.ILog.IsInfoEnabled">
            <summary>
            Returns true if Info is enabled
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.ILog.IsWarnEnabled">
            <summary>
            Returns true if Warn is enabled
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.ILog.IsErrorEnabled">
            <summary>
            Returns true if Error is enabled
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.ILog.IsFatalEnabled">
            <summary>
            Returns true if Fatal is enabled
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.ILogExtensions">
            <summary>
            Log extensions to help make log
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.Debug(Mecalux.ITSW.Core.Abstraction.ILog,System.Func{System.String})">
            <summary>
            Log to Debug trace level.
            </summary>
            <param name="logger"></param>
            <param name="messageFunc"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.Debug(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Object[])">
            <summary>
            Log to Debug trace level.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.DebugContext(Mecalux.ITSW.Core.Abstraction.ILog,System.Func{System.String},System.String,System.Object[])">
            <summary>
            Log to Debug trace level with context information.
            </summary>
            <param name="logger">The logger.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.DebugException(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Exception)">
            <summary>
            Log to debug trace level with an exception.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.Error(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Object[])">
            <summary>
            Log to error trace level with parameters.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.ErrorContext(Mecalux.ITSW.Core.Abstraction.ILog,System.Func{System.String},System.String,System.Object[])">
            <summary>
            Log to error trace level with parameters and context information.
            </summary>
            <param name="logger">The logger.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.ErrorException(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Exception)">
            <summary>
            Log to error trace level with an exception.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.Fatal(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Object[])">
            <summary>
            Log to fatal trace level and parameters.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.FatalContext(Mecalux.ITSW.Core.Abstraction.ILog,System.Func{System.String},System.String,System.Object[])">
            <summary>
            Log to fatal trace level with parameters and context information.
            </summary>
            <param name="logger">The logger.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.FatalException(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Exception)">
            <summary>
            Log to fatal trace level with an exception.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.Info(Mecalux.ITSW.Core.Abstraction.ILog,System.Func{System.String})">
            <summary>
            Log to Info trace level.
            </summary>
            <param name="logger"></param>
            <param name="messageFunc"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.Info(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Object[])">
            <summary>
            Log to Info trace level with parameters.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.InfoContext(Mecalux.ITSW.Core.Abstraction.ILog,System.Func{System.String},System.String,System.Object[])">
            <summary>
            Log to Info trace level with parameters and context information.
            </summary>
            <param name="logger">The logger.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.InfoException(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Exception)">
            <summary>
            Log to Info trace level with an exception.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.Warn(Mecalux.ITSW.Core.Abstraction.ILog,System.Func{System.String})">
            <summary>
            Log to warning trace level.
            </summary>
            <param name="logger"></param>
            <param name="messageFunc"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.Warn(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Object[])">
            <summary>
            Log to warning trace level with parameters.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.WarnContext(Mecalux.ITSW.Core.Abstraction.ILog,System.Func{System.String},System.String,System.Object[])">
            <summary>
            Log to warning trace level with parameters and context information.
            </summary>
            <param name="logger">The logger.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.WarnException(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Exception)">
            <summary>
            Log to warning trace level with an exception information.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.Trace(Mecalux.ITSW.Core.Abstraction.ILog,System.Func{System.String})">
            <summary>
            Log to Trace trace level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.Trace(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Object[])">
            <summary>
            Log to Trace trace level with parameters.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.TraceContext(Mecalux.ITSW.Core.Abstraction.ILog,System.Func{System.String},System.String,System.Object[])">
            <summary>
            Log to Trace trace level with parameters and context information.
            </summary>
            <param name="logger">The logger.</param>
            <param name="context">The context.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogExtensions.TraceException(Mecalux.ITSW.Core.Abstraction.ILog,System.String,System.Exception)">
            <summary>
            Log to Trace trace level with an exception.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.ILogManager">
            <summary>
            Handle ILog creation <see cref="T:Mecalux.ITSW.Core.Abstraction.ILog"/> and handle context creation
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.GetLogger(System.String)">
            <summary>
            Get a "named" logger
            </summary>
            <param name="name">Name of the logger, usually the Type name of the class</param>
            <returns>The logger</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.OpenNestedContext(System.String)">
            <summary>
            Opens a Nexted context. Usefull to follow the call stack.
            </summary>
            <param name="message">The name of the current context</param>
            <returns>The return value is a IDisposable to handle via using</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.ClearNestedContext">
            <summary>
            Clears the nested context.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.OpenMappedContext(System.String,System.String)">
            <summary>
            Open a mapped not nexted context. Usefull to have an specific name
            </summary>
            <param name="key">Key of the mapped context</param>
            <param name="value">Value of the mapped context</param>
            <returns>The return value is a IDisposable to handle via using</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.OpenMappedNestedContext(System.String,System.String)">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.OpenMappedNestedContext(System.String,System.String,System.Boolean)">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.OpenMappedNestedContext(System.String,System.String,System.Boolean,System.Func{System.String})">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <param name="costMessage">The cost message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.OpenMappedNestedContext(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.OpenMappedNestedContext(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="values">The values.</param>
            <param name="cost">set to <c>true</c> to include cost timer.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.OpenMappedNestedContext(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Func{System.String})">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="values">The values.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <param name="costMessage">The cost message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.OpenMappedNestedContext(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Func{System.String},Mecalux.ITSW.Core.Abstraction.LogLevel)">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="values">The values.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <param name="costMessage">The cost message.</param>
            <param name="costLogLevel">The cost log level.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.OpenMappedNestedContext(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Func{System.String},Mecalux.ITSW.Core.Abstraction.LogLevel,System.Nullable{System.Int32})">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="values">The values.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <param name="costMessage">The cost message.</param>
            <param name="costLogLevel">The cost log level.</param>
            <param name="costLimit">The cost limit.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.ILogManager.GetCurrentMappedNestedContext">
            <summary>
            Gets the current mapped nested context values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.LogEventInfo">
            <summary>
            Information about a log level.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogEventInfo.Level">
            <summary>
            Gets or sets the level.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogEventInfo.TimeStamp">
            <summary>
            Gets or sets the time stamp.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogEventInfo.MessageFunc">
            <summary>
            Gets or sets the function to build the message.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogEventInfo.FormattedMessage">
            <summary>
            Gets or sets the formatted message.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogEventInfo.LoggerName">
            <summary>
            Gets or sets the name of the logger.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogEventInfo.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogEventInfo.ContextMessageFunc">
            <summary>
            Gets or sets the context function.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogEventInfo.Context">
            <summary>
            Gets or sets the context.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.LogFormat"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.LogFormat"/> class.
            </summary>
            <param name="initialFormat">The initial format.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Abstraction.LogFormat"/> class.
            Adds the specified key and value to the formatted string.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddElementSeparator">
            <summary>
            Adds an element separator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddIndentLevel">
            <summary>
            Adds one line indent level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.RemoveIndentLevel">
            <summary>
            Removes one line indent level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddLine">
            <summary>
            Adds an empty new line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddFormat(Mecalux.ITSW.Core.Abstraction.LogFormat)">
            <summary>
            Adds the specified format inside this one.
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.Add(System.Object)">
            <summary>
            Adds the specified value to the formatted string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value to the formatted string.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> with the instance format.
            </summary>
            <returns>
            A <see cref="T:System.String"/> with the instance format.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddLine(System.Object)">
            <summary>
            Adds a line with the specified object value to the formatted string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddLine(System.String,System.Object)">
            <summary>
            Adds a line with the specified key and object value to the formatted string.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddLine(System.String,System.String,System.Object)">
            <summary>
            Adds a line with the specified key, subkey and value to the formatted string.
            </summary>
            <param name="key">The key.</param>
            <param name="subkey">The subkey.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddLineIndented(System.String,System.Object)">
            <summary>
            Adds an indented line with the object value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddLineList``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Adds a line with the list value (header and items).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="maxElements">The max elements.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddLineList``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,Mecalux.ITSW.Core.Abstraction.LogFormat})">
            <summary>
            Adds a line with the list value (header and items). Items are formatted using the action (no ToString() method).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="maxElements">The max elements.</param>
            <param name="elementFormatAction">The element format action.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddLineDictionary``2(System.String,System.Collections.Generic.IDictionary{``0,``1},System.Int32)">
            <summary>
            Adds a line with the dictionary value (header and items).
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="maxElements">The max elements.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.AddLineDictionary``2(System.String,System.Collections.Generic.IDictionary{``0,``1},System.Int32,System.Func{``1,Mecalux.ITSW.Core.Abstraction.LogFormat})">
            <summary>
            Adds a line with the dictionary value (header and items). Item values are formatted using the action (no ToString() method).
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="maxElements">The max elements.</param>
            <param name="elementFormatAction">The element format action.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.Create">
            <summary>
            Creates a new LogFormat instance.
            </summary>
            <returns>A LogFormat instance.</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.Create(System.String)">
            <summary>
            Creates a new LogFormat instance with specified initial format.
            </summary>
            <param name="initialFormat">The initial format.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.Get(System.Action{Mecalux.ITSW.Core.Abstraction.LogFormat})">
            <summary>
            Gets the specified format created with the action.
            </summary>
            <param name="format">The format.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogFormat.Get(System.String,System.Action{Mecalux.ITSW.Core.Abstraction.LogFormat})">
            <summary>
            Gets the specified format created with the action and initial format.
            </summary>
            <param name="initialFormat">The initial format.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogFormat.Level">
            <summary>
            Gets the actual line indent level for this thread.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.LogLevel">
            <summary>
            Defined Log levels
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.LogLevel.Trace">
            <summary>
            Trace level, the maximum detail of log
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.LogLevel.Debug">
            <summary>
            Debug level
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.LogLevel.Info">
            <summary>
            Info level. Only for actions usefull to the final user
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.LogLevel.Warn">
            <summary>
            Warning level. To alert the user and technical support of some problem
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.LogLevel.Error">
            <summary>
            Error level. The errors should be logged at this level, except that is an inexpected error
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.LogLevel.Fatal">
            <summary>
            Fatal error. The application can´t continue in a know situation
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.LogManager">
            <summary>
            LogManager. It's independent of the base log library
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.GetLogger(System.Type)">
            <summary>
            Gets the ILog for one type Fullname
            </summary>
            <param name="type"></param>
            <returns>The ILog for the Type FullName</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.GetLogger(System.String)">
            <summary>
            Gets the ILog for a specific name string
            </summary>
            <param name="name">Name of the logger</param>
            <returns>The ILog</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.RegisterTarget``1">
            <summary>
            Registers the target.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.RegisterTarget(Mecalux.ITSW.Core.Abstraction.LogTarget)">
            <summary>
            Registers the target.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.UnregisterTarget(Mecalux.ITSW.Core.Abstraction.LogTarget)">
            <summary>
            Unregisters the target.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.GetTargets``1">
            <summary>
            Gets the targets.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.GetTargets">
            <summary>
            Gets all registered targets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.OpenNestedContext(System.String)">
            <summary>
            Opens the nested context.
            </summary>
            <param name="context">The context text.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.ClearNestedContext">
            <summary>
            Clears the nested context.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped context.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.OpenMappedNestedContext(System.String,System.String)">
            <summary>
            Opens a mapped nested context.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.OpenMappedNestedContext(System.String,System.String,System.Boolean)">
            <summary>
            Opens a mapped nested context.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.OpenMappedNestedContext(System.String,System.String,System.Boolean,System.Func{System.String})">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <param name="costMessage">The cost message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.OpenMappedNestedContext(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Opens a mapped nested context.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.OpenMappedNestedContext(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Opens a mapped nested context.
            </summary>
            <param name="values">The values.</param>
            <param name="cost">set to <c>true</c> to include cost timer.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.OpenMappedNestedContext(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Func{System.String})">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="values">The values.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <param name="costMessage">The cost message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.OpenMappedNestedContext(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Func{System.String},Mecalux.ITSW.Core.Abstraction.LogLevel)">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="values">The values.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <param name="costMessage">The cost message.</param>
            <param name="costLogLevel">The cost log level.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.OpenMappedNestedContext(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Func{System.String},Mecalux.ITSW.Core.Abstraction.LogLevel,System.Nullable{System.Int32})">
            <summary>
            Opens the mapped nested context.
            </summary>
            <param name="values">The values.</param>
            <param name="cost">if set to <c>true</c> [cost].</param>
            <param name="costMessage">The cost message.</param>
            <param name="costLogLevel">The cost log level.</param>
            <param name="costLimit">The cost limit.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.GetCurrentMappedNestedContext">
            <summary>
            Gets the current mapped nested context values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.GetCanWriteTargets">
            <summary>
            Gets the can write targets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.LogManager.GetCanWriteCostTargets">
            <summary>
            Gets the can write cost targets.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.LogManager.CurrentLogManager">
            <summary>
            Returns the ILogManager
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.LogManager.LogContextKeys">
            <summary>
            Log MDC context key constants
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Log4NetLogManager">
            <summary>
            LogManager for log4net 1.2.10
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Configuration.ConnectionsSection">
            <summary>
            Configuration section for connection settings
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.NoOpLogger">
            <summary>
            Fake ILog class
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.NoOpLogger.IsLevelEnabled(Mecalux.ITSW.Core.Abstraction.LogLevel)">
            <summary>
            Determines whether [is level enabled] [the specified log level].
            </summary>
            <param name="logLevel">The log level.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.NoOpLogger.Log(Mecalux.ITSW.Core.Abstraction.LogLevel,System.Func{System.String})">
            <summary>
            
            </summary>
            <param name="logLevel"></param>
            <param name="messageFunc"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.NoOpLogger.Log``1(Mecalux.ITSW.Core.Abstraction.LogLevel,System.Func{System.String},``0)">
            <summary>
            
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="logLevel"></param>
            <param name="messageFunc"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.NoOpLogger.Log(Mecalux.ITSW.Core.Abstraction.LogLevel,System.Func{System.String},System.Func{System.String})">
            <summary>
            Log information to the targets with specific context info.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="contextFunc">The context function</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.NoOpLogger.IsTraceEnabled">
            <summary>
            Returns true if Trace is enabled
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.NoOpLogger.IsDebugEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.NoOpLogger.IsInfoEnabled">
            <summary>
            Returns true if Info is enabled
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.NoOpLogger.IsWarnEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.NoOpLogger.IsErrorEnabled">
            <summary>
            Returns true if Error is enabled
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.NoOpLogger.IsFatalEnabled">
            <summary>
            Returns true if Fatal is enabled
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography">
            <summary>
            Cryptography utility class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.SignString(System.String,System.String)">
            <summary>
            Signs the string and returns Base64 signature.
            </summary>
            <param name="input">The input.</param>
            <param name="privateKey">The private key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.VerifyString(System.String,System.String,System.String)">
            <summary>
            Verifies the string.
            </summary>
            <param name="input">The input.</param>
            <param name="signature">The signature.</param>
            <param name="publicKey">The public key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.EncryptString(System.String,System.String)">
            <summary>
            Encrypts the string using the key.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key. Must have between 5 and 16 characters.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.DecryptString(System.String,System.String)">
            <summary>
            Decrypts the string using the key.
            </summary>
            <param name="source">The source.</param>
            <param name="key">The key. Must have between 5 and 16 characters.</param>
            <returns></returns>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.bytSalt">
            <summary>
            32 bytes salt
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.bytIV">
            <summary>
            32 bytes IV
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.EncodeHMACSHA1(System.String,System.String)">
            <summary>
            Computes the Base64 hash value for the input string with UTF8Encoding.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.EncodeHMACSHA256(System.String,System.String)">
            <summary>
            Computes the Base64 hash value for the input string with UTF8Encoding.
            </summary>
            <param name="message">The message.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.EncodeHMACSHA1(System.Byte[],System.Byte[])">
            <summary>
            Computes the hash value for the input data.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.EncodeHMACSHA256(System.Byte[],System.Byte[])">
            <summary>
            Computes the hash value for the input data.
            </summary>
            <param name="input">The input.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.EncodeSHA256(System.String)">
            <summary>
            Computes the Base64 hash value for the input string and UTF8Encoding.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.EncodeSHA256(System.Byte[])">
            <summary>
            Computes the Base64 hash value for the input data.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.EncodeMD5(System.String)">
            <summary>
            Computes the Base64 hash value for the input string and UTF8Encoding.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.EncodeMD5(System.Byte[])">
            <summary>
            Computes the hash value for the input data.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.GenerateRandomKey(System.Int32)">
            <summary>
            Generates the random filled byte array.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Cryptography.GenerateRandomAlphanumericKey(System.Int32)">
            <summary>
            Generates the random alphanumeric key/password.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition">
            <summary>
            Argument guard conditions.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.BaseCondition.ThrowException``1(System.Object[])">
            <summary>
            Throws a exception of type T
            </summary>
            <typeparam name="T">Type of the exception to throw</typeparam>
            <param name="exceptionParams">The exception params.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.BaseCondition.ThrowExceptionFunctions``1(System.Func{System.Object}[])">
            <summary>
            Throws a exception of type T
            </summary>
            <typeparam name="T">Type of the exception to throw</typeparam>
            <param name="exceptionParams">The exception params functions.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.BaseCondition.ThrowExceptionFunctions``1(System.Func{System.String},System.Func{System.Collections.Generic.IDictionary{System.String,System.String}},System.Func{System.Object}[])">
            <summary>
            Throws a exception of type T
            </summary>
            <param name="data">Data</param>
            <param name="errorCode">Error code</param>
            <typeparam name="T">Type of the exception to throw</typeparam>
            <param name="exceptionParams">The exception params functions.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.BaseCondition.ThrowExceptionIf``1(System.Boolean,System.Object[])">
            <summary>
            Throws a exception if the condition is true.
            </summary>
            <typeparam name="T">Type of the exception to throw.</typeparam>
            <param name="condition">Condition.</param>
            <param name="exceptionParams">The exception params.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.BaseCondition.ThrowExceptionIf``1(System.Boolean,System.Func{System.Object}[])">
            <summary>
            Throws the exception if.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="exceptionParams">The exception parameters.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.BaseCondition.ThrowExceptionIf``1(System.Boolean,System.Func{System.String},System.Func{System.Collections.Generic.IDictionary{System.String,System.String}},System.Func{System.Object}[])">
            <summary>
            Throws the exception if.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="exceptionParams">The exception parameters.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNull(System.Object)">
            <summary>
            Determines whether [is not null] [the specified argument].
            </summary>
            <param name="argument">The argument.</param>
            <exception cref="T:System.ArgumentNullException">If the argument is null.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNull(System.Object,System.String)">
            <summary>
            Determines whether [is not null] [the specified argument].
            </summary>
            <param name="argument">The argument.</param>
            <param name="userMessage">The user message.</param>
            <exception cref="T:System.ArgumentNullException">If the argument is null.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNull(System.Object,System.Func{System.String})">
            <summary>
            Determines whether [is not null] [the specified argument].
            </summary>
            <param name="argument">The argument.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNull(System.Object,System.String,System.String)">
            <summary>
            Determines whether [is not null] [the specified argument].
            </summary>
            <param name="argument">The argument.</param>
            <param name="paramName">Name of the param.</param>
            <param name="userMessage">The user message.</param>
            <exception cref="T:System.ArgumentNullException">If the argument is null. The name of the parameter and user message are included in the exception.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNull(System.Func{System.Object})">
            <summary>
            Determines whether [is not null] [the specified object expression].
            </summary>
            <param name="expression">The expression.</param>
            <exception cref="T:System.ArgumentNullException">If the expression is null. The name of the parameter is not included in the exception.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNull(System.Func{System.Object},System.String)">
            <summary>
            Determines whether [is not null] [the specified object expression].
            </summary>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <exception cref="T:System.ArgumentNullException">If the expression is null. The userMessage is included in the exception.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNull(System.Func{System.Object},System.String,System.String)">
            <summary>
            Determines whether [is not null] [the specified expression].
            </summary>
            <param name="expression">The expression.</param>
            <param name="paramName">Name of the param.</param>
            <param name="userMessage">The user message.</param>
            <exception cref="T:System.ArgumentNullException">If the expression is null. The name of the parameter and the userMessage are included in the exception.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNull(System.Guid)">
            <summary>
            Determines whether [is not Guid.Empty] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If value is Guid.Empty.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNull(System.Guid,System.String)">
            <summary>
            Determines whether [is not Guid.Empty] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If value is Guid.Empty.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNull(System.Guid,System.String,System.String)">
            <summary>
            Determines whether [is not Guid.Empty] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the param.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If value is Guid.Empty. The name of the parameter and user message are included in the exception.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether [is not null or empty] [the specified collection].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified collection].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified collection].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="paramName">Name of the param.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty``1(System.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Determines whether [is not null or empty] [the specified expression].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If the expression is null or empty. The name of the parameter and the userMessage is included in the exception.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty``1(System.Func{System.Collections.Generic.IEnumerable{``0}},System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified expression].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If the expression is null or empty. The name of the parameter and the userMessage is included in the exception.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty``1(System.Func{System.Collections.Generic.IEnumerable{``0}},System.String,System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified expression].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <param name="paramName">Name of the param.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty(System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified string].
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty(System.String,System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified string].
            </summary>
            <param name="value">The value.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty(System.String,System.Func{System.String})">
            <summary>
            Determines whether [is not null or empty] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the param.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty(System.Func{System.String})">
            <summary>
            Determines whether [is not null or empty] [the specified object expression].
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If the expression is null or empty. The name of the parameter and the userMessage is included in the exception.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty(System.Func{System.String},System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified object expression].
            </summary>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">If the expression is null or empty. The name of the parameter and the userMessage is included in the exception.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrEmpty(System.Func{System.String},System.String,System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified expression].
            </summary>
            <param name="expression">The expression.</param>
            <param name="paramName">Name of the param.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified string].
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified string].
            </summary>
            <param name="value">The value.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrWhiteSpace(System.String,System.Func{System.String})">
            <summary>
            Determines whether [is not null or white space] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the param.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.IsNotNullOrWhiteSpace(System.String,System.String,System.Func{System.String})">
            <summary>
            Determines whether [is not null or white space] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the parameter.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.MeetCondition(System.Boolean)">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <param name="value">the value.</param>
            <exception cref="T:System.ArgumentException">If the value is false.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.MeetCondition(System.Boolean,System.String)">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="userMessage">The user message.</param>
            <exception cref="T:System.ArgumentException">If the value is false.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.MeetCondition(System.Boolean,System.Func{System.String})">
            <summary>
            Meets the condition.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.MeetCondition(System.Boolean,System.String,System.String)">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="paramName">Name of the param.</param>
            <param name="userMessage">The user message.</param>
            <exception cref="T:System.ArgumentException">If the value is false.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.MeetCondition(System.Boolean,System.String,System.Func{System.String})">
            <summary>
            Meets the condition.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="paramName">Name of the parameter.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.MeetCondition``1(System.Boolean,System.Object[])">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="value">The value.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.MeetCondition(System.Func{System.Boolean})">
            <summary>
            Determines whether the specified expression is true.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If the expression is false.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.MeetCondition(System.Func{System.Boolean},System.String)">
            <summary>
            Determines whether the specified expression is true.
            </summary>
            <param name="expression">The expression.</param>
            <exception cref="T:System.ArgumentException">If the expression is false.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.MeetCondition(System.Func{System.Boolean},System.String,System.String)">
            <summary>
            Determines whether the specified expression is true.
            </summary>
            <param name="expression">The expression.</param>
            <param name="paramName">Name of the param.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If the expression is false.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ArgumentCondition.MeetCondition``1(System.Func{System.Boolean},System.Object[])">
            <summary>
            Determines whether the specified expression is true. Throws an exception if expression is false.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="expression">The expression.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue(System.Boolean)">
            <summary>
            Determines whether specified value is true.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"/>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue(System.Boolean,System.String)">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <param name="value">The value.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"/>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue(System.Boolean,System.Func{System.String})">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue(System.Boolean,System.Func{System.String},System.Func{System.String},System.Func{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="userMessage">The user message.</param>
            <param name="errorCode">Error code that will be placed on the exception if validations fails</param>
            <param name="data">If it is not null, all its data will be added to the exception data if validation fails</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue``1(System.Boolean,System.Object[])">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="value">The value.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue``1(System.Boolean,System.Func{System.Object}[])">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="exceptionParams">The exception parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue``1(System.Boolean,System.String,System.Func{System.Collections.Generic.IDictionary{System.String,System.String}},System.Func{System.Object}[])">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="exceptionParams">The exception parameters.</param>
            <param name="errorCode">Error code that will be placed on the exception if validations fails</param>
            <param name="data">If it is not null, all its data will be added to the exception data if validation fails</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue(System.Func{System.Boolean})">
            <summary>
            Determines whether the specified expression is true.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If the expression is false.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue(System.Func{System.Boolean},System.String)">
            <summary>
            Determines whether the specified expression is true. Throws an exception if expression is false.
            </summary>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If the expression is false.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue(System.Func{System.Boolean},System.Func{System.String})">
            <summary>
            Determines whether the specified expression is true.
            </summary>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue``1(System.Func{System.Boolean},System.Object[])">
            <summary>
            Determines whether the specified expression is true. Throws an exception if expression is false.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="expression">The expression.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
            <exception>If the expression is false.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsTrue``1(System.Func{System.Boolean},System.Func{System.Object}[])">
            <summary>
            Determines whether the specified expression is true.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="expression">The expression.</param>
            <param name="exceptionParams">The exception parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse(System.Boolean)">
            <summary>
            Determines whether specified value is false.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If condition is true</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse(System.Boolean,System.String)">
            <summary>
            Determines whether the specified value is false.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If condition is true</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse(System.Boolean,System.Func{System.String})">
            <summary>
            Determines whether the specified value is false.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse(System.Boolean,System.Func{System.String},System.Func{System.String},System.Func{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Determines whether the specified value is false.
            </summary>
            <param name="value">if set to <c>false</c> [value].</param>
            <param name="userMessage">The user message.</param>
            <param name="errorCode">Error code that will be placed on the exception if validations fails</param>
            <param name="data">If it is not null, all its data will be added to the exception data if validation fails</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse``1(System.Boolean,System.Object[])">
            <summary>
            Determines whether the specified expression is false and throws an exception if condition is true.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="value">The value.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse``1(System.Boolean,System.Func{System.Object}[])">
            <summary>
            Determines whether the specified value is false.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="exceptionParams">The exception parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse``1(System.Boolean,System.String,System.Func{System.Collections.Generic.IDictionary{System.String,System.String}},System.Func{System.Object}[])">
            <summary>
            Determines whether the specified value is false.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="value">if set to <c>false</c> [value].</param>
            <param name="exceptionParams">The exception parameters.</param>
            <param name="errorCode">Error code that will be placed on the exception if validations fails</param>
            <param name="data">If it is not null, all its data will be added to the exception data if validation fails</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse(System.Func{System.Boolean})">
            <summary>
            Determines whether the specified expression is false.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If condition is true</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse(System.Func{System.Boolean},System.String)">
            <summary>
            Determines whether the specified expression is false.
            </summary>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If condition is true</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse(System.Func{System.Boolean},System.Func{System.String})">
            <summary>
            Determines whether the specified expression is false.
            </summary>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse``1(System.Func{System.Boolean},System.Object[])">
            <summary>
            Determines whether the specified expression is false and throws an exception if condition is true.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="expression">The expression.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsFalse``1(System.Func{System.Boolean},System.Func{System.Object}[])">
            <summary>
            Determines whether the specified expression is false.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="expression">The expression.</param>
            <param name="exceptionParams">The exception parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Object)">
            <summary>
            Determines whether [is not null] [the specified instance].
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"/>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Object,System.String)">
            <summary>
            Determines whether [is not null] [the specified instance].
            </summary>
            <param name="instance">The instance.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If instance is null</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Object,System.Func{System.String})">
            <summary>
            Determines whether [is not null] [the specified instance].
            </summary>
            <param name="instance">The instance.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Object,System.Func{System.String},System.Func{System.String},System.Func{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Determines whether [is not null] [the specified instance].
            </summary>
            <param name="instance">The instance.</param>
            <param name="userMessage">The user message.</param>
            <param name="errorCode">Error code that will be placed on the exception if validations fails</param>
            <param name="data">If it is not null, all its data will be added to the exception data if validation fails</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``1(System.Object,System.Object[])">
            <summary>
            Determines whether [is not null] [the specified instance].
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="instance">The instance.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``1(System.Object,System.Func{System.Object}[])">
            <summary>
            Determines whether [is not null] [the specified instance].
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="instance">The instance.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``1(System.Object,System.String,System.Func{System.Collections.Generic.IDictionary{System.String,System.String}},System.Func{System.Object}[])">
            <summary>
            Determines whether [is not null] [the specified instance].
            </summary>
            <param name="instance">The instance.</param>
            <param name="errorCode">Error code that will be placed on the exception if validations fails</param>
            <param name="exceptionParams">The exception params.</param>
            <param name="data">If it is not null, all its data will be added to the exception data if validation fails</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Guid)">
            <summary>
            Determines whether [is not Guid.Empty] [the specified instance].
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If instance is Guid.Empty</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Guid,System.String)">
            <summary>
            Determines whether [is not Guid.Empty] [the specified instance].
            </summary>
            <param name="instance">The instance.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If instance is Guid.Empty</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Guid,System.Func{System.String})">
            <summary>
            Determines whether [is not null] [the specified instance].
            </summary>
            <param name="instance">The instance.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Guid,System.Func{System.String},System.Func{System.String},System.Func{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Determines whether [is not null] [the specified instance].
            </summary>
            <param name="instance">The instance.</param>
            <param name="userMessage">The user message.</param>
            <param name="errorCode">Error code that will be placed on the exception if validations fails</param>
            <param name="data">If it is not null, all its data will be added to the exception data if validation fails</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``1(System.Guid,System.Object[])">
            <summary>
            Determines whether [is not Guid.Empty] [the specified instance].
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="instance">The instance.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``1(System.Guid,System.Func{System.Object}[])">
            <summary>
            Determines whether [is not Guid.Empty] [the specified instance].
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="instance">The instance.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``1(System.Guid,System.String,System.Func{System.Collections.Generic.IDictionary{System.String,System.String}},System.Func{System.Object}[])">
            <summary>
            Determines whether [is not Guid.Empty] [the specified instance].
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="instance">The instance.</param>
            <param name="exceptionParams">The exception params.</param>
            <param name="errorCode">Error code that will be placed on the exception if validations fails</param>
            <param name="data">If it is not null, all its data will be added to the exception data if validation fails</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Func{System.Object})">
            <summary>
            Determines whether [is not null] [the specified expression].
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If the expression is null.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Func{System.Object},System.String)">
            <summary>
            Determines whether [is not null] [the specified expression].
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If the expression is null.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull(System.Func{System.Object},System.Func{System.String})">
            <summary>
            Determines whether [is not null] [the specified expression].
            </summary>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``1(System.Func{System.Object},System.Object[])">
            <summary>
            Determines whether [is not null] [the specified expression].
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="expression">The expression.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``1(System.Func{``0})">
            <summary>
            Determines whether [is not null] [the specified expression].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If the expression is null.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``1(System.Func{``0},System.String)">
            <summary>
            Determines whether [is not null] [the specified expression].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If the expression is null.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``1(System.Func{``0},System.Func{System.String})">
            <summary>
            Determines whether [is not null] [the specified expression].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.ExpressionCondition.IsNotNull``2(System.Func{``0},System.Object[])">
            <summary>
            Determines whether [is not null] [the specified expression] and throws an exception with the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="expression">The expression.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.CollectionCondition">
            <summary>
            Collections guard conditions
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.CollectionCondition.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether [the specified expression] is not null and contains any element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If expresion is null or does not contain some element.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.CollectionCondition.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Determines whether [the specified expression] is not null and contains any element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="userMessage">The user message.</param>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If expresion is null or does not contain some element.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.CollectionCondition.IsNotNullOrEmpty``1(System.Func{System.Collections.Generic.IEnumerable{``0}},System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified expression].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression.</param>
            <param name="userMessage">The user message.</param>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException">If expresion is null or does not contain some element.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.CollectionCondition.IsNotNullOrEmpty``2(System.Collections.Generic.IEnumerable{``0},System.Object[])">
            <summary>
            Determines whether [is not null or empty] [the specified collection].
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="collection">The collection.</param>
            <param name="exceptionParams">The exception params.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Conditions.CollectionCondition.IsNotNullOrEmpty``2(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Object[])">
            <summary>
            Determines whether [is not null or empty] [the specified expression].
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="expression">The expression.</param>
            <param name="exceptionParams">The exception params.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.Guard.Guard">
            <summary>
            A static helper class that includes various parameter checking functions.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Abstraction.Exceptions.GuardException.ExpressionName">
            <summary>
            The expresion name
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.Guard.GuardType">
            <summary>
            All guard types
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.GuidUtil">
            <summary>
            Guid generator utility class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.GuidUtil.NewSequentialId">
            <summary>
            Creates a sequential GUID according to SQL Server's ordering rules.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.GuidUtil.NewCombId">
            <summary>
            Generate a new <see cref="T:System.Guid"/> using the comb algorithm.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.GuidUtil.NewId">
            <summary>
            Generates a new <see cref="T:System.Guid"/> based on the <see cref="M:System.Guid.NewGuid"/> method.
            </summary>
            <returns>A new generated <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.TimeCheck">
            <summary>
            Time measure utility class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TimeCheck.Start">
            <summary>
            Starts measuring elapsed time and returns the handle.
            </summary>
            <returns>Created handle</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TimeCheck.CheckPoint(System.Int32)">
            <summary>
            Returns the elapsed time for the specified handle.
            </summary>
            <param name="watchHandle">The watch handle</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TimeCheck.Stop(System.Int32)">
            <summary>
            Stops and removes the specified watch handle.
            </summary>
            <param name="watchHandle">The watch handle.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TimeCheck.Pause(System.Int32)">
            <summary>
            Stops/Pauses the specified watch handle.
            </summary>
            <param name="watchHandle">The watch handle.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TimeCheck.Resume(System.Int32)">
            <summary>
            Resumes the specified watch handle.
            </summary>
            <param name="watchHandle">The watch handle.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TimeCheck.Restart(System.Int32)">
            <summary>
            Restart the specified watch handle.
            </summary>
            <param name="watchHandle">The watch handle.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TimeCheck.StartMeasure(System.Int32@)">
            <summary>
            Starts the measure for a using block. No need to call Stop.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.TimeUtil">
            <summary>
            Time and DateTime utility class.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Abstraction.Utils.TimeUtil.EpochUtc">
            <summary>
            The epoch UTC
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TimeUtil.GetSecondsFromEpochUtc">
            <summary>
             Gets the total seconds from epoc utc date to now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TimeUtil.GetSecondsFromEpochUtc(System.DateTime)">
            <summary>
            Gets the seconds from epoch UTC date to a specific date.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TimeUtil.GetUtcDateTimeFromEpoch(System.Int64)">
            <summary>
            Gets the UTC date time from epoch. This is the reverse of GetSecondsFromEpochUtc.
            </summary>
            <param name="totalSeconds">The total seconds.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Abstraction.Utils.TypeUtil">
            <summary>
            Type related methods utility class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TypeUtil.GetString(System.Type)">
            <summary>
            Gets the string from a type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TypeUtil.CreateDefaultConstructor(System.Type)">
            <summary>
            Creates the default constructor function.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TypeUtil.CreateDefaultConstructor``1(System.Type)">
            <summary>
            Creates the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TypeUtil.GetObjectWithDefaultConstructor(System.Type)">
            <summary>
            Creates a object with default constructor.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TypeUtil.GetUninitializedObject(System.Type)">
            <summary>
            Creates an uninitialized object. Not calling default constructor.
            <remarks>To use under your responsibility.</remarks>
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Abstraction.Utils.TypeUtil.GetType(System.String)">
            <summary>
            Finds the type Type.GetType or in all assemblies in app domain if not found.
            </summary>
            <param name="typeString">The type string.</param>
            <returns></returns>
        </member>
    </members>
</doc>
