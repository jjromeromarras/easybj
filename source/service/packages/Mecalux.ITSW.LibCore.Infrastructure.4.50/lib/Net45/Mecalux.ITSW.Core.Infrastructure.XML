<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mecalux.ITSW.Core.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreAttribute">
            <summary>
            Attribute for a Guid property that must be saved in configured IBlobStore
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreAttribute"/> class.
            The property must by a Guid property.
            </summary>
            <param name="blobPropertyName">Name of the blob data property.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreAttribute.BlobPropertyName">
            <summary>
            Gets or sets the name of the blob data property.
            </summary>
            <value>
            The name of the blob data property.
            </value>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobDeleteAttribute">
            <summary>
            Attribute for a Guid property that must be deleted in configured IBlobStore
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobDeleteAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreAttribute"/> class.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreMessageMutator`1">
            <summary>
            Class that checks IBlobProperty or BlobAttributes in message, saves values in blob store and removes its value from the message.
            </summary>
            <typeparam name="TMessage">The type of the content.</typeparam>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IMessageMutator`1">
            <summary>
            Represents a class that modifies incoming and outgoing messages.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IMessageMutator`1.MutateOutgoing(`0)">
            <summary>
            Mutates the outgoing message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IMessageMutator`1.MutateIncoming(`0)">
            <summary>
            Mutates the incoming message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreMessageMutator`1.#ctor(Mecalux.ITSW.Core.Infrastructure.BlobStorage.IBlobStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreMessageMutator`1"/> class.
            </summary>
            <param name="store">The store.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreMessageMutator`1.#ctor(Mecalux.ITSW.Core.Infrastructure.BlobStorage.IBlobStore,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreMessageMutator`1"/> class.
            </summary>
            <param name="store">The store.</param>
            <param name="mutateRecursive">if set to <c>true</c> [mutate recursive].</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreMessageMutator`1.MutateOutgoing(`0)">
            <summary>
            Mutates the outgoing message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.BlobStoreMessageMutator`1.MutateIncoming(`0)">
            <summary>
            Mutates the incoming message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.BlobStorage.IBlobStore">
            <summary>
            Interface for blob storage repository.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.IBlobStore.Find(System.String)">
            <summary>
            Finds the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>null if the blob does not exist.</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.IBlobStore.Save(System.String,System.Byte[])">
            <summary>
            Saves the specified id.
            </summary>
            <param name="id">The id.</param>
            <param name="blob">The BLOB.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.IBlobStore.Delete(System.String)">
            <summary>
            Deletes the specified blob id. Does not throw exception if blob does not exist.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.BlobStorage.InMemoryBlobStore">
            <summary>
            In memory blob storage class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.InMemoryBlobStore.Find(System.String)">
            <summary>
            Finds the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.InMemoryBlobStore.Save(System.String,System.Byte[])">
            <summary>
            Saves the specified blob.
            </summary>
            <param name="id">The id.</param>
            <param name="blob">The BLOB.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.BlobStorage.InMemoryBlobStore.Delete(System.String)">
            <summary>
            Deletes the specified blob.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.BusExtension">
            <summary>
            ICommandBus and IEventBus extension methods
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.BusExtension.Execute(Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus,Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Executes the specified command synchronously.
            </summary>
            <param name="commandBus">The command bus.</param>
            <param name="command">The command.</param>
            <returns>Command execution result</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.BusExtension.Send(Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus,Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Sends the specified command asynchronously.
            </summary>
            <param name="commandBus">The command bus.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.BusExtension.Execute(Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus,System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Executes the specified command synchronously.
            </summary>
            <param name="commandBus">The command bus.</param>
            <param name="commands">The commands.</param>
            <returns>Command execution results</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.BusExtension.Send(Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus,System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Sends the specified commands asynchronously.
            </summary>
            <param name="commandBus">The command bus.</param>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.BusExtension.Publish(Mecalux.ITSW.Core.Infrastructure.Bus.IEventBus,Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Sends the specified event.
            </summary>
            <param name="eventBus">The event bus.</param>
            <param name="event">The @event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.BusExtension.Publish(Mecalux.ITSW.Core.Infrastructure.Bus.IEventBus,System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publish the specified events.
            </summary>
            <param name="eventBus">The event bus.</param>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.BusExtension.PublishAsync(Mecalux.ITSW.Core.Infrastructure.Bus.IEventBus,Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Publishes the events asynchronously.
            </summary>
            <param name="eventBus">The event bus.</param>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.BusExtension.PublishAsync(Mecalux.ITSW.Core.Infrastructure.Bus.IEventBus,System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the events asynchronously.
            </summary>
            <param name="eventBus">The event bus.</param>
            <param name="events">The events.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.CommandDispatcher">
            <summary>
            Command dispatcher
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler">
            <summary>
            IRegisterCommandHandler interface
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandHandler)">
            <summary>
            Registers all handler types.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandHandler{``0})">
            <summary>
            Registers the handler for the specified type.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler.UnregisterHandler``1">
            <summary>
            Unregisters all handlers for the command type.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler.UnregisterHandler(System.Type)">
            <summary>
            Unregisters all handlers for the command type.
            </summary>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler.IsRegistered``1">
            <summary>
            Determines whether this instance type has a registered handler.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified command type has a registered handler.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns>
              <c>true</c> if the specified command type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.CommandDispatcher.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandHandler)">
            <summary>
            Registers all handler command types.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.CommandDispatcher.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandHandler{``0})">
            <summary>
            Registers the handler for the command type.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.CommandDispatcher.UnregisterHandler``1">
            <summary>
            Unregisters the handler for the command type.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.CommandDispatcher.UnregisterHandler(System.Type)">
            <summary>
            Unregisters the handler for the command type.
            </summary>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.CommandDispatcher.IsRegistered``1">
            <summary>
            Determines whether this instance has registered handler.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.CommandDispatcher.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified command type has registered handler
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns>
              <c>true</c> if the specified command type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.CommandDispatcher.ProcessMessage(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand,System.String,System.String)">
            <summary>
            Processes the message by calling the registered handler.
            </summary>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException">If specified command has no registered handler.</exception>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException">
            <summary>
            Data bus exception.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException"/> class.
            </summary>
            <param name="cause">The cause.</param>
            <param name="solution">The solution.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="solution">The solution.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusMessageMutator`1">
            <summary>
            Mutator to send/receive message databus properties from a data bus.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusMessageMutator`1.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusMessageMutator`1"/> class.
            </summary>
            <param name="dataBus">The data bus.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusMessageMutator`1.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBus,Mecalux.ITSW.Core.Infrastructure.Serialization.ITextWriterSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusMessageMutator`1"/> class.
            </summary>
            <param name="dataBus">The data bus.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusMessageMutator`1.MutateOutgoing(`0)">
            <summary>
            Mutates the outgoing message. Scans databus properties and sends the value to the bus.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusMessageMutator`1.MutateIncoming(`0)">
            <summary>
            Mutates the incoming message. Scans databus properties and sets the value from the bus.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1">
            <summary>
            Databus property
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBusProperty">
            <summary>
            Represents a property sent via IDataBus.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBusProperty.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBusProperty.GetValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBusProperty.SetValue(System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBusProperty.Key">
            <summary>
            Gets or sets the key.
            </summary>>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBusProperty.HasValue">
            <summary>
            Gets or sets a value indicating whether this instance has value.
            </summary>
            <value>
              <c>true</c> if this instance has value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1.SetValue(System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="valueToSet">The value to set.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1.GetValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1.HasValue">
            <summary>
            Gets or sets a value indicating whether this instance has value.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusProperty`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusReferenceMessage">
            <summary>
            DataBusReferenceMessage
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBusReferenceMessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBusReferenceMessage.ReferenceId">
            <summary>
            Gets the reference id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBusReferenceMessage.ContentType">
            <summary>
            Gets the type of the referenced content.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusReferenceMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusReferenceMessage"/> class.
            </summary>
            <param name="referenceId">The reference identifier.</param>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusReferenceMessage.ReferenceId">
            <summary>
            Gets the reference id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Data.DataBusReferenceMessage.ContentType">
            <summary>
            Gets the type of the referenced content.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBus">
            <summary>
            Data bus for large objects.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBus.Put(System.String,System.Byte[],System.TimeSpan)">
            <summary>
            Adds a data item to the bus with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBus.Get(System.String)">
            <summary>
            Gets and deletes the data item from the bus. Returns null if not found.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBus.Peek(System.String)">
            <summary>
            Gets the data item from the bus. Returns null if not found.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBus.Delete(System.String)">
            <summary>
            Deletes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.IDataBus.Start">
            <summary>
            Starts the data bus background tasks.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2">
            <summary>
            Base event bus class
            </summary>
            <typeparam name="TDocument">The type of the document.</typeparam>
            <typeparam name="TPackage">The type of the package.</typeparam>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.IPackageEventBus">
            <summary>
            Package event bus
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.IEventBus">
            <summary>
            Represents an event bus
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler">
            <summary>
            IRegisterEventHandler interface
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler)">
            <summary>
            Registers the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler{``0})">
            <summary>
            Registers the handler for the specified type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler.UnregisterHandlers``1">
            <summary>
            Unregisters all handlers for the event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler.UnregisterHandlers(System.Type)">
            <summary>
            Unregisters all handlers for the event type.
            </summary>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler.UnregisterHandlers(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Unregisters the handler matching the condition.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandlerCondition">The event handler condition.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler.UnregisterHandlers(System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Unregisters the handlers that meet the condition.
            </summary>
            <param name="eventHandlerCondition">The event handler condition.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler.IsRegistered``1">
            <summary>
            Determines whether this instance type has some registered handler.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified event type has some registered handler.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns>
              <c>true</c> if the specified event type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler.IsRegistered(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Determines whether the specified event type and event handler is registered.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandlerCondition">The event handler condition.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IEventBus.Publish(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the specified event.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IEventBus.Publish(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the specified events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IEventBus.PublishAsync(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the event asynchronously.
            </summary>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IEventBus.PublishAsync(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the events asynchronously.
            </summary>
            <param name="events">The events.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.IEventBusRetry">
            <summary>
            Event bus that accepts retries
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IEventBusRetry.PublishRetry(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the specified event on the bus subscription.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IEventBusRetry.PublishRetry(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the specified events on the bus subscription.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IEventBusRetry.PublishAsyncRetry(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the event on the bus subscription asynchronously.
            </summary>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IEventBusRetry.PublishAsyncRetry(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the events on the bus subscription asynchronously.
            </summary>
            <param name="events">The events.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.IStopWaitProcessor">
            <summary>
            Interface for stoppable buses
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.IProcessor">
            <summary>
            Interface for startable buses
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IProcessor.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IProcessor.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.IStopWaitProcessor.StopWait">
            <summary>
            Stops this instance and waits for stop.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.SubscriptionStore">
            <summary>
            The subscription store
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Subscription">
            <summary>
            The subscription
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.IEventBusSubscriptionStore,Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="subscriptionStore">The subscription store.</param>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.StopWait">
            <summary>
            Stops this instance and waits for stop.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Publish(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the specified event.
            </summary>
            <param name="event">The event.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Publish(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the specified events.
            </summary>
            <param name="events">The events.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.PublishAsync(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the asynchronous.
            </summary>
            <param name="event">The event.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.PublishAsync(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the asynchronous.
            </summary>
            <param name="events">The events.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.PublishRetry(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the specified event on the bus subscription.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.PublishRetry(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the specified events on the bus subscription.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.PublishAsyncRetry(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the event on the bus subscription asynchronously.
            </summary>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.PublishAsyncRetry(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the events on the bus subscription asynchronously.
            </summary>
            <param name="events">The events.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler)">
            <summary>
            Registers the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler{``0})">
            <summary>
            Registers the handler for the specified type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.UnregisterHandlers``1">
            <summary>
            Unregisters all handlers for the event type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.UnregisterHandlers(System.Type)">
            <summary>
            Unregisters all handlers for the event type.
            </summary>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.UnregisterHandlers(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Unregisters the handler matching the condition.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandlerCondition">The event handler condition.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.UnregisterHandlers(System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Unregisters the handlers that meet the condition.
            </summary>
            <param name="eventHandlerCondition">The event handler condition.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.IsRegistered``1">
            <summary>
            Determines whether this instance type has some registered handler.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified event type has some registered handler.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns>
              <c>true</c> if the specified event type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.IsRegistered(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Determines whether the specified event type and event handler is registered.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandlerCondition">The event handler condition.</param>
            <returns></returns>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Dispose">
            <summary>
            Disposes the resources used by the processor.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Dispose(System.Boolean)">
            <summary>
            Disposes the resources used by the processor.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Publish(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IEvent},Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription)">
            <summary>
            Publishes the specified events.
            </summary>
            <param name="events">The events.</param>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.ReceiveDocuments(System.Threading.CancellationToken)">
            <summary>
            Receives the batch.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.GetDocumentEvent(`0)">
            <summary>
            Gets the document event.
            </summary>
            <param name="document">The document.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.MoveToError(`0)">
            <summary>
            Moves to error.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.MoveToError(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Moves to error.
            </summary>
            <param name="documents">The documents.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Confirm(`0)">
            <summary>
            Confirms the specified document.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Confirm(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Confirms the specified documents.
            </summary>
            <param name="documents">The documents.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.PublishPackage(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IEvent},Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription)">
            <summary>
            Publishes the package.
            </summary>
            <param name="events">The events.</param>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.ReceivePackage(System.Threading.CancellationToken)">
            <summary>
            Receives the package.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.GetPackageEvents(`1)">
            <summary>
            Gets the package events.
            </summary>
            <param name="package">The package.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.MoveToError(`1)">
            <summary>
            Moves to error.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Confirm(`1)">
            <summary>
            Confirms the processed package.
            </summary>
            <param name="package">The package.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.SubscriptionName">
            <summary>
            Gets the name of the subscription.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.BaseEventBus`2.Started">
            <summary>
            Gets a value indicating whether this instance is started.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription">
            <summary>
            Event bus subscription
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription.Name">
            <summary>
            Gets the name of the subscription.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription.CollectionName">
            <summary>
            The target collection where messages should be delivered matching the subscription
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription.ErrorCollectionName">
            <summary>
            Gets the name of the error collection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription.RetryForever">
            <summary>
            Gets a value indicating whether [use error collection].
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription.EmptyPendingBeforeStart">
            <summary>
            Gets a value indicating whether [empty pending before start].
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription.PackageEventHandler">
            <summary>
            Gets the package event handler.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription.MultiEventHandler">
            <summary>
            Gets the multi event handler.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription.TenantId">
            <summary>
            Gets or sets the subscription tenant identifier.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.IEventBusSubscriptionStore">
            <summary>
            EventBusSubscriptionStore
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.IEventBusSubscriptionStore.Add(Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription)">
            <summary>
            Adds the specified subscription.
            </summary>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.IEventBusSubscriptionStore.GetSubscriptions">
            <summary>
            Gets the subscriptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.IEventBusSubscriptionStore.Remove(Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription)">
            <summary>
            Removes the specified subscription.
            </summary>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.InMemorySubscriptionStore">
            <summary>
            Event bus in memory subscription store
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.InMemorySubscriptionStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.InMemorySubscriptionStore"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.InMemorySubscriptionStore.Add(Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription)">
            <summary>
            Adds the specified subscription.
            </summary>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.InMemorySubscriptionStore.Remove(Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.EventBusSubscription)">
            <summary>
            Removes the specified subscription.
            </summary>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.InMemorySubscriptionStore.GetSubscriptions">
            <summary>
            Gets the subscriptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.InMemorySubscriptionStore.Dispose">
            <summary>
            Disposes the resources used by the processor.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventBus.InMemorySubscriptionStore.Dispose(System.Boolean)">
            <summary>
            Disposes the resources used by the processor.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler`1">
            <summary>
            Mesage handler registration class.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler`1.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler)">
            <summary>
            Registers all messages that are handled.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler`1.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler{``0})">
            <summary>
            Registers the handler for the message type.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler`1.UnregisterHandlers``1">
            <summary>
            Unregisters all handlers for this type.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler`1.UnregisterHandlers(System.Type)">
            <summary>
            Unregisters all handlers for this type.
            </summary>
            <param name="messageType">Type of the message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler`1.UnregisterHandlers(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler,System.Boolean})">
            <summary>
            Unregisters the handler matching the condition.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="messageHandlerCondition">The message handler condition.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler`1.UnregisterHandlers(System.Func{Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler,System.Boolean})">
            <summary>
            Unregisters the handlers that meet the condition.
            </summary>
            <param name="messageHandlerCondition">The message handler condition.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler`1.IsRegistered``1">
            <summary>
            Determines whether this instance is registered.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler`1.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified message type is registered.
            </summary>
            <param name="messageType">Type of the message.</param>
            <returns>
              <c>true</c> if the specified message type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler`1.IsRegistered(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler,System.Boolean})">
            <summary>
            Determines whether the specified message type and message handler is registered.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="messageHandlerCondition">The message handler condition.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscription">
            <summary>
            Local event bus subscription
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscription.#ctor(System.String,Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscription"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="eventDispatcher">The event dispatcher.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscription.Name">
            <summary>
            Gets the name of the subscription.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscription.EventDispatcher">
            <summary>
            Gets or sets the event dispatcher.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscription.PackageEventHandler">
            <summary>
            Gets the package event handler.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscription.MultiEventHandler">
            <summary>
            Gets the multi event handler.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscription.TenantId">
            <summary>
            Gets or sets the subscription tenant identifier.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscriptionStore">
            <summary>
            LocalBus subscriptions store
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscriptionStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscriptionStore"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscriptionStore.Add(Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscription)">
            <summary>
            Adds the specified subscription.
            </summary>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscriptionStore.Remove(Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscription)">
            <summary>
            Removes the specified subscription.
            </summary>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscriptionStore.GetSubscriptions">
            <summary>
            Gets the subscriptions.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.CommandInfo">
            <summary>
            Command information
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.ICommandInfo">
            <summary>
            Command information
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommandInfo.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommandInfo.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommandInfo.Module">
            <summary>
            Gets the module that executes the command.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommandInfo.CurrentOperationName">
            <summary>
            Gets the name of the operations generated by the current ommand.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.CommandInfo.#ctor(System.Guid,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.CommandInfo"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
            <param name="operationName">Name of the operation.</param>
            <param name="module">The module.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.CommandInfo.#ctor(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.CommandInfo"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.CommandInfo.#ctor(Mecalux.ITSW.Core.Infrastructure.Commands.ICommandInfo,Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.CommandInfo"/> class.
            </summary>
            <param name="currentInfo">The current information.</param>
            <param name="currentCommand">The current command.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionContext">
            <summary>
            Command execution context
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionContext.#ctor(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionContext"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionContext.Warnings">
            <summary>
            Gets or sets the warnings.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionContext.Current">
            <summary>
            Current CommandExecutionContext
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.CommandExecutionResult">
            <summary>
            Command handler execution result.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.CommandExecutionResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.CommandExecutionResult"/> class.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.CommandExecutionResult.WarningMessages">
            <summary>
            Gets the warning messages.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainSnapshotException">
            <summary>
            Snapshot exception
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainSnapshotException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainSnapshotException"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainSnapshotException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainSnapshotException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainSnapshotException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainSnapshotException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.DomainSnapshotException.AggregateRootId">
            <summary>
            Gets the aggregate root identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.DomainSnapshotException.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException">
            <summary>
            Publication event exception.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"/> class.
            </summary>
            <param name="cause">The cause.</param>
            <param name="solution">The solution.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="solution">The solution.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException.Events">
            <summary>
            Gets the events to publish.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Handling.IPackageEventHandler">
            <summary>
            Represents a handler for a package of IEvent
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Handling.IPackageEventHandler.Handle(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IPackageEvent})">
            <summary>
            Handles an events package.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Handling.IMultiEventHandler">
            <summary>
            Represents a handler for a batch of IEvent
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Handling.IMultiEventHandler.Handle(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IEvent},Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher)">
            <summary>
            Handles a batch of events.
            </summary>
            <param name="events">The events.</param>
            <param name="dispatcher">The dispatcher.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.IPackageEvent">
            <summary>
            An events package
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.IEvent">
            <summary>
            Represents a domain evensource event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.EventId">
            <summary>
            Gets the event id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.SourceId">
            <summary>
            Gets the identifier of the source aggregate root originating the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.EventDate">
            <summary>
            Gets the event originated date.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.ApplyDate">
            <summary>
            Gets the apply date.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.Sequence">
            <summary>
            Gets the event sequence regarding the events on the source.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.ContextSequence">
            <summary>
            Order of the event in the context where it was created.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.Version">
            <summary>
            Gets the event version.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.UserContext">
            <summary>
            Gets the user context originating the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.CommandId">
            <summary>
            Gets or sets the source command identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEvent.CommandName">
            <summary>
            Gets or sets the name of the command.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IPackageEvent.EventSourceType">
            <summary>
            Gets or sets the type of the eventsource.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IPackageEvent.EventSourceSequence">
            <summary>
            Gets or sets the eventsource sequence.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IPackageEvent.EventSourceLastEventSequence">
            <summary>
            Gets or sets the eventsource last event sequence.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IPackageEvent.EventSourceArchive">
            <summary>
            Gets or sets a value indicating whether the eventsource is archive.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IPackageEvent.Events">
            <summary>
            Gets or sets the events.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.IProcessInfoEvent">
            <summary>
            Represents a domain evensource event with process information
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IProcessInfoEvent.ProcessId">
            <summary>
            Gets or sets the name of the process that generated the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IProcessInfoEvent.ProcessName">
            <summary>
            Gets or sets the identifier of the process that generated the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IProcessInfoEvent.ProcessEquipment">
            <summary>
            Gets or sets the process equiment.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.IRemoveEvent">
            <summary>
            Represents a domain evensource remove event. Indicates that all previous eventsource events must be archived.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.INodeEvent">
            <summary>
            Event to initialize Process Node when executing workflow by event subscription.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.INodeEvent.Node">
            <summary>
            Node. Sets the ProcessInfo.Node property.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.INodeIdEvent">
            <summary>
            Event to initialize Process NodeId when executing workflow by event subscription.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.INodeIdEvent.NodeId">
            <summary>
            Node identifier. Sets the ProcessInfo.NodeId property.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent">
            <summary>
            An events package
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent"/> class.
            </summary>
            <param name="sourceId">The aggregate source id.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.EventId">
            <summary>
            Gets the event id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.SourceId">
            <summary>
            Gets the identifier of the source aggregate root originating the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.EventDate">
            <summary>
            Gets the event originated date.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.ApplyDate">
            <summary>
            Gets the apply date.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.Sequence">
            <summary>
            Gets the event sequence regarding the events on the source.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.ContextSequence">
            <summary>
            Order of the event in the context where it was created.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.Version">
            <summary>
            Gets the event version.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.UserContext">
            <summary>
            Gets the user context originating the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.CommandId">
            <summary>
            Gets or sets the source command identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.CommandName">
            <summary>
            Gets or sets the name of the command.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.EventSourceType">
            <summary>
            Gets or sets the type of the aggregat.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.EventSourceSequence">
            <summary>
            Gets or sets the aggregat sequence.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.EventSourceLastEventSequence">
            <summary>
            Gets or sets the aggregat last event sequence.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.EventSourceArchive">
            <summary>
            Gets or sets a value indicating whether the event source is archived.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.PackageEvent.Events">
            <summary>
            Gets or sets the events.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore">
            <summary>
            Migratable event storage
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore">
            <summary>
            Represents a store repository for IEvents
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.GetEvents(System.Guid,System.Int64)">
            <summary>
            Gets the events.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <param name="startSequence">The start sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.GetEvents(System.Guid,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets the events.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <param name="dateFrom">The date from.</param>
            <param name="dateTo">The date to.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.GetCommandEvents(System.Guid)">
            <summary>
            Gets the command events.
            </summary>
            <param name="commandId">The command identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.GetCorrelationEvents(System.String)">
            <summary>
            Gets the correlation events.
            </summary>
            <param name="correlationId">The correlation identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.GetUnSnapshootedEvents(System.Type)">
            <summary>
            Gets the un snapshooted events.
            </summary>
            <param name="aggregateRootType">Type of the aggregate root.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.GetUnSnapshootedEvents">
            <summary>
            Gets the un snapshooted events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.Store(Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource)">
            <summary>
            Stores the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource})">
            <summary>
            Stores the specified sources.
            </summary>
            <param name="sources">The sources.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource},System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource})">
            <summary>
            Archives and stores (in that order) the specified sources in the
            same transaction if possible.
            </summary>
            <param name="archiveSources">The sources that should be archived.</param>
            <param name="storeSources">The sources that should be stored.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IPackageEvent})">
            <summary>
            Stores the specified events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.SetSnapshotted(Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource)">
            <summary>
            Sets the snapshotted.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.SetSnapshotted(System.Guid,System.Int64)">
            <summary>
            Sets the snapshotted.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <param name="sourceLastEventSequence">The source last event sequence.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.Archive(Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource)">
            <summary>
            Archives the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore.Archive(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource})">
            <summary>
            Archives the specified sources.
            </summary>
            <param name="sources">The sources.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.GetAllEventDocumentsCount">
            <summary>
            Gets all event documents count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.GetAllEventDocuments(System.Int32,System.Int32)">
            <summary>
            Gets all event documents.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.GetAllEventDocumentsEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets all event documents enumerator.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.GetUnSnapshootedEventDocumentsCount">
            <summary>
            Gets the un snapshooted event documents count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.GetUnSnapshootedEventDocuments(System.Int32,System.Int32)">
            <summary>
            Gets the un snapshooted event documents.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.GetUnSnapshootedEventDocumentsEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets the un snapshooted event documents.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.StoreDocuments(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.EventStoreDocument})">
            <summary>
            Stores the documents.
            </summary>
            <param name="documents">The documents.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.GetAllArchivedEventDocumentsCount">
            <summary>
            Gets all archived event documents count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.GetAllArchivedEventDocuments(System.Int32,System.Int32)">
            <summary>
            Gets all archived event documents.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.GetAllArchivedEventDocumentsEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets all archived event documents enumerator.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IMigratableEventStore.StoreArchivedDocuments(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.EventStoreDocument})">
            <summary>
            Stores the documents in archive.
            </summary>
            <param name="documents">The documents.</param>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.DatabaseException"></exception>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.EventStoreDocument">
            <summary>
            Event document
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.EventStoreDocument.EventSourceType">
            <summary>
            Gets or sets the type of the event source.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.EventStoreDocument.SnapshottedSequence">
            <summary>
            Gets or sets the snapshotted sequence.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.EventStoreDocument.Data">
            <summary>
            Gets or sets the event.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Operations.BaseOperationEventHandler`1">
            <summary>
            Base event handler for operation events
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1">
            <summary>
            Base event handler class
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenant">
            <summary>
            Tenant interface
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenant.TenantId">
            <summary>
            Gets the tenant identifier.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler`1">
            <summary>
            Represents a handler for IEvent
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler">
            <summary>
            Marker interface that makes it easier to discover handlers via reflection.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler`1.Handle(`0)">
            <summary>
            Handles the specified event.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1.tenantId">
            <summary>
            The tenant identifier
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1.Handle(`0)">
            <summary>
            Handles the specified event.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1.InitializeHandle(`0)">
            <summary>
            Initializes the handle.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1.ExecuteHandle(`0)">
            <summary>
            Executes the handle.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1.HandleEvent(`0)">
            <summary>
            Handles the event.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1.logger">
            <summary>
            Gets or sets the logger.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1.TenantId">
            <summary>
            Gets the tenant identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Handling.BaseEventHandler`1.ApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.BaseOperationEventHandler`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Operations.BaseOperationEventHandler`1"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.BaseOperationEventHandler`1.InitializeHandle(`0)">
            <summary>
            Initializes the handle.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent">
            <summary>
            Operation event interface
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent.Initialize(Mecalux.ITSW.Core.Infrastructure.Operations.OperationAttribute,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Mecalux.ITSW.Core.Abstraction.Common.ObjectValue}})">
            <summary>
            Initializes the operation data from attribute values.
            </summary>
            <param name="operation">The operation.</param>
            <param name="operationValues">The operation values.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent.Initialize(Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Initializes the operation data from original event.
            </summary>
            <param name="originalEvent">The original event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent.Register">
            <summary>
            Registers this operation event instance to be published on commit.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent.OperationName">
            <summary>
            Gets the name of the operation.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent.Module">
            <summary>
            Gets or sets the module.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent.Equipment">
            <summary>
            Equipment.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent.Data">
            <summary>
            Gets or sets the data values.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Operations.OperationDataAttribute">
            <summary>
            Attribute to define an operation
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Operations.OperationDataAttribute"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationDataAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Operations.OperationDataAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationDataAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Operations.OperationDataAttribute"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationDataAttribute.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationDataAttribute.Value">
            <summary>
            Gets the custom value.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationDataAttribute.HasValue">
            <summary>
            Gets a value indicating whether this instance has value.
            </summary>
            <value>
              <c>true</c> if this instance has value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Operations.OperationAttribute">
            <summary>
            Attribute to define an operation
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Operations.OperationAttribute"/> class.
            </summary>
            <param name="operationName">Name of the operation.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Operations.OperationAttribute"/> class.
            </summary>
            <param name="operationName">Name of the operation.</param>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationAttribute.OperationName">
            <summary>
            Gets or sets the name of the operation.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationAttribute.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent">
            <summary>
            Operation event class
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.Initialize(Mecalux.ITSW.Core.Infrastructure.Operations.OperationAttribute,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Mecalux.ITSW.Core.Abstraction.Common.ObjectValue}})">
            <summary>
            Initializes the operation data from attribute values.
            </summary>
            <param name="operation">The operation.</param>
            <param name="operationValues">The operation values.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.Initialize(Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Initializes the operation data from original event.
            </summary>
            <param name="originalEvent">The original event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.Register">
            <summary>
            Registers this operation event instance to be published on commit.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.ShouldRegisterOperation">
            <summary>
            Returns true if the operation must be registered.
            Called when this operation is going to be registered.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.EventId">
            <summary>
            Gets the event id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.SourceId">
            <summary>
            Gets the identifier of the source aggregate root originating the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.EventDate">
            <summary>
            Gets the event originated date.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.ApplyDate">
            <summary>
            Gets the apply date.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.Sequence">
            <summary>
            Gets the event sequence.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.ContextSequence">
            <summary>
            Order of the event in the context where it was created.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.Version">
            <summary>
            Gets the event version.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.UserContext">
            <summary>
            Gets the user context originating the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.CommandId">
            <summary>
            Gets or sets the identifier of the source command that generated the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.CommandName">
            <summary>
            Gets or sets the name of the source command that generated the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.OperationName">
            <summary>
            Gets the name of the operation.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.Module">
            <summary>
            Gets or sets the module.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.Equipment">
            <summary>
            Equipment.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.Document">
            <summary>
            Gets or sets the document.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.DocumentId">
            <summary>
            Gets or sets the document identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Operations.OperationEvent.Data">
            <summary>
            Gets or sets the data values.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Processes.CommandProcessResult">
            <summary>
            Command execution result.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CommandProcessResult.#ctor(System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Processes.CommandProcessResult"/> class.
            </summary>
            <param name="commandId">The command identifier.</param>
            <param name="warningMessages">The warning messages.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CommandProcessResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CommandProcessResult.CommandId">
            <summary>
            Gets the command identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CommandProcessResult.WarningMessages">
            <summary>
            Gets the warning messages.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManagerExtension">
            <summary>
            ICorrelatedProcessManager Extensions
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManagerExtension.AddCommands(Mecalux.ITSW.Core.Infrastructure.Processes.ICorrelatedProcessManager,System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Adds the commands.
            </summary>
            <param name="manager">The manager.</param>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManagerExtension.SetCommands(Mecalux.ITSW.Core.Infrastructure.Processes.ICorrelatedProcessManager,System.Collections.Generic.Queue{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Sets the commands.
            </summary>
            <param name="manager">The manager.</param>
            <param name="commands">The commands.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot">
            <summary>
            AggregateRoot interface
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource">
            <summary>
            Represents a class that is a source of events and represents all his state changes via a sequence of events.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource.LoadFromHistoricalEvents(Mecalux.ITSW.Core.Infrastructure.Events.IEvent[])">
            <summary>
            Loads the instance from historical events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource.UpdateSequences(System.Int64,System.Int64)">
            <summary>
            Updates the Sequence and LastEventSequence properties.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="lastEventSequence">The last event sequence.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource.Id">
            <summary>
            Gets the EventSource's Id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource.Sequence">
            <summary>
            Gets the EventSource's actual sequence number.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource.LastEventSequence">
            <summary>
            Gets the EventSource's actual event sequence number. As the EventSource is being updated and events being generated, the sequence is incremented.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource.UncommittedEvents">
            <summary>
            Gets the collection of new events since the EventSource was loaded, as a consequence of command handling.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot.RegisterEntity(Mecalux.ITSW.Core.Infrastructure.Domain.IEntity)">
            <summary>
            Registers the entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot.UnregisterEntity(Mecalux.ITSW.Core.Infrastructure.Domain.IEntity)">
            <summary>
            Unregisters the entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot.Id">
            <summary>
            Gets the EventSource's Id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot.Sequence">
            <summary>
            Gets the EventSource's actual sequence number.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot.LastEventSequence">
            <summary>
            Gets the EventSource's actual event sequence number. As the EventSource is being updated and events being generated, the sequence is incremented.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Data.InMemoryDataBus">
            <summary>
            In memory data bus class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.InMemoryDataBus.Get(System.String)">
            <summary>
            Gets and deletes the data item from the bus. Returns null if not found.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.InMemoryDataBus.Put(System.String,System.Byte[],System.TimeSpan)">
            <summary>
            Adds a data item to the bus with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.InMemoryDataBus.Delete(System.String)">
            <summary>
            Deletes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.InMemoryDataBus.Peek(System.String)">
            <summary>
            Gets the data item from the bus. Returns null if not found.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Data.InMemoryDataBus.Start">
            <summary>
            Starts the data bus background tasks.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Envelope`1">
            <summary>
            Provides the envelope for an object that will be sent to a command bus.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Envelope`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Envelope`1"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Envelope`1.Content">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Envelope`1.CorrelationId">
            <summary>
            Gets the correlation id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Envelope`1.Delay">
            <summary>
            Gets or sets the delay for processing the body.
            </summary>
            <value>
            The delay.
            </value>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher">
            <summary>
            Event dispatcher
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler)">
            <summary>
            Registers all handlers.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler{``0})">
            <summary>
            Registers the handler of the specified type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.UnregisterHandlers``1">
            <summary>
            Unregisters all handlers for this type.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.UnregisterHandlers(System.Type)">
            <summary>
            Unregisters all handlers for this type.
            </summary>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.UnregisterHandlers(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Unregisters the handler matching the condition.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandlerCondition">The event handler condition.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.UnregisterHandlers(System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Unregisters the handlers that meet the condition.
            </summary>
            <param name="eventHandlerCondition">The event handler condition.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.IsRegistered``1">
            <summary>
            Determines whether this instance has some registered handler.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified event type has some registered handler.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns>
              <c>true</c> if the specified event type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.IsRegistered(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Determines whether the specified event type and event handler is registered.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandlerCondition">The event handler condition.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.HasRegisteredHandlers">
            <summary>
            Determines whether [has registered handlers].
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.ProcessMessage(Mecalux.ITSW.Core.Infrastructure.Events.IEvent,System.String,System.String)">
            <summary>
            Processes the message by calling the registered handler.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.EventDispatcher.ParallelDispatch">
            <summary>
            Gets or sets a value indicating whether [parallel process].
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageDispatcher`1">
            <summary>
            Generic message dispatcher
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageDispatcher`1.SendMessage(`0)">
            <summary>
            Sends the message to the registered handlers.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageRegistrationExtension">
            <summary>
            IRegisterMessageHandler extension methods 
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageRegistrationExtension.RegisterAllHandlersInAssemblies``1(Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler{``0},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Registers all IMessageHandler in assemblies.
            Handlers will be created via Activator.CreateInstance. They must have a default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageRegistrationExtension.RegisterAllHandlersInAssemblies``1(Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler{``0},System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Mecalux.ITSW.Core.Abstraction.IServiceLocator)">
            <summary>
            Registers all IMessageHandler in assemblies.
            Handlers will be created via IServiceLocator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="handlerServiceLocator">The service locator.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageRegistrationExtension.RegisterAllHandlersInAssemblies``1(Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler{``0},System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Object})">
            <summary>
            Registers all IMessageHandler in assemblies.
            Handlers will be created with handlerFactory method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="handlerFactory">The handler factory.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageRegistrationExtension.RegisterAllHandlersInAssembly``1(Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler{``0},System.Reflection.Assembly)">
            <summary>
            Registers all IMessageHandler handlers in assembly.
            Handlers will be created via Activator.CreateInstance. They must have a default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageRegistrationExtension.RegisterAllHandlersInAssembly``1(Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler{``0},System.Reflection.Assembly,Mecalux.ITSW.Core.Abstraction.IServiceLocator)">
            <summary>
            Registers all IMessageHandler handlers in assembly.
            Handlers will be created via IServiceLocator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
            <param name="handlerServiceLocator">The service locator.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageRegistrationExtension.RegisterAllHandlersInAssembly``1(Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IRegisterMessageHandler{``0},System.Reflection.Assembly,System.Func{System.Type,System.Object})">
            <summary>
            Registers all IMessageHandler in assembly.
            Handlers will be created with handlerFactory method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
            <param name="handlerFactory">The handler factory.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1">
            <summary>
            A generic class to register and dispatch messages through message handlers.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler)">
            <summary>
            Registers all messages that are handled.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler{``0})">
            <summary>
            Registers the handler for the message type.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.UnregisterHandlers``1">
            <summary>
            Unregisters all handlers for this type.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.UnregisterHandlers(System.Type)">
            <summary>
            Unregisters all handlers for this type.
            </summary>
            <param name="messageType">Type of the message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.UnregisterHandlers(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler,System.Boolean})">
            <summary>
            Unregisters all handlers for this type.
            </summary>
            <param name="messageType"></param>
            <param name="messageHandlerCondition"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.UnregisterHandlers(System.Func{Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler,System.Boolean})">
            <summary>
            Unregisters the handlers that meet the condition.
            </summary>
            <param name="messageHandlerCondition"></param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.IsRegistered``1">
            <summary>
            Determines whether this instance has some registered handler.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified message type has some registered handler.
            </summary>
            <param name="messageType">Type of the message.</param>
            <returns>
              <c>true</c> if the specified message type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.IsRegistered(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler,System.Boolean})">
            <summary>
            Determines whether this instance is registered.
            </summary>
            <param name="messageType"></param>
            <param name="messageHandlerCondition"></param>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.SendMessage(`0)">
            <summary>
            Processes the message by calling the registered handlers sequentially.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.GetHandlersCount(System.Type)">
            <summary>
            Gets the number of registered handlers for the type.
            </summary>
            <param name="messageType">Type of the message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.GetHandlersCount">
            <summary>
            Gets the total number of registered handlers.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.MessageDispatcher`1.SendMessageThroughHierarchy">
            <summary>
            Gets or sets a value indicating whether SendMessage method calls all hierarchy message handlers.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler">
            <summary>
            Represents a handler for a message
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler`1">
            <summary>
            Represents a handler for a message of type T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Generic.IMessageHandler`1.Handle(`0)">
            <summary>
            Handles the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension">
            <summary>
            IRegisterHandlers extension methods
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssemblies(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Registers all ICommandHandler in assemblies.
            Handlers will be created via Activator.CreateInstance. They must have a default constructor.
            </summary>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssemblies(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Mecalux.ITSW.Core.Abstraction.IServiceLocator)">
            <summary>
            Registers all ICommandHandler in assemblies.
            Handlers will be created via IServiceLocator.
            </summary>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="handlerServiceLocator">The service locator.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssemblies(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Object})">
            <summary>
            Registers all ICommandHandler in assemblies.
            Handlers will be created with handlerFactory method.
            </summary>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="handlerFactory">The handler factory.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssembly(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler,System.Reflection.Assembly)">
            <summary>
            Registers all ICommandHandler handlers in assembly.
            Handlers will be created via Activator.CreateInstance. They must have a default constructor.
            </summary>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssembly(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler,System.Reflection.Assembly,Mecalux.ITSW.Core.Abstraction.IServiceLocator)">
            <summary>
            Registers all ICommandHandler handlers in assembly.
            Handlers will be created via IServiceLocator.
            </summary>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
            <param name="handlerServiceLocator">The service locator.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssembly(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterCommandHandler,System.Reflection.Assembly,System.Func{System.Type,System.Object})">
            <summary>
            Registers all ICommandHandler in assembly.
            Handlers will be created with handlerFactory method.
            </summary>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
            <param name="handlerFactory">The handler factory.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssemblies(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Registers all IEventHandler in assemblies.
            Handlers will be created via Activator.CreateInstance. They must have a default constructor.
            </summary>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssemblies(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Mecalux.ITSW.Core.Abstraction.IServiceLocator)">
            <summary>
            Registers all IEventHandler in assemblies.
            Handlers will be created via IServiceLocator.
            </summary>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="handlerServiceLocator">The service locator.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssemblies(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Object})">
            <summary>
            Registers all IEventHandler in assemblies.
            </summary>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="handlerFactory">The handler factory.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssembly(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler,System.Reflection.Assembly)">
            <summary>
            Registers all IEventHandler in assembly.
            Handlers will be created via Activator.CreateInstance. They must have a default constructor.
            </summary>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssembly(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler,System.Reflection.Assembly,Mecalux.ITSW.Core.Abstraction.IServiceLocator)">
            <summary>
            Registers all IEventHandler in assembly.
            Handlers will be created via IServiceLocator.
            </summary>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
            <param name="handlerServiceLocator">The service locator.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssembly(Mecalux.ITSW.Core.Infrastructure.Bus.IRegisterEventHandler,System.Reflection.Assembly,System.Func{System.Type,System.Object})">
            <summary>
            Registers all IEventHandler in assembly.
            </summary>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
            <param name="handlerFactory">The handler factory.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssemblies(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Registers all handlers in assemblies.
            Handlers will be created via Activator.CreateInstance. They must have a default constructor.
            </summary>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssemblies(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Mecalux.ITSW.Core.Abstraction.IServiceLocator)">
            <summary>
            Registers all handler in assemblies.
            Handlers will be created via IServiceLocator.
            </summary>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="handlerServiceLocator">The service locator.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssemblies(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Object})">
            <summary>
            Registers all handlers in assemblies.
            </summary>
            <param name="target">The target.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="handlerFactory">The handler factory.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssembly(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler,System.Reflection.Assembly)">
            <summary>
            Registers all handlers in assembly.
            Handlers will be created via Activator.CreateInstance. They must have a default constructor.
            </summary>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssembly(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler,System.Reflection.Assembly,Mecalux.ITSW.Core.Abstraction.IServiceLocator)">
            <summary>
            Registers all handlers in assembly.
            Handlers will be created via IServiceLocator.
            </summary>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
            <param name="handlerServiceLocator">The service locator.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.RegistrationExtension.RegisterAllHandlersInAssembly(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler,System.Reflection.Assembly,System.Func{System.Type,System.Object})">
            <summary>
            Registers all handlers in assembly.
            </summary>
            <param name="target">The target.</param>
            <param name="assembly">The assembly.</param>
            <param name="handlerFactory">The handler factory.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher">
            <summary>
            Local command validation dispatcher
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandValidationHandler)">
            <summary>
            Registers the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandValidationHandler{``0})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler.IsRegistered``1">
            <summary>
            Determines whether this instance is registered.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.IRegisterCommandValidationHandler.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified command type is registered.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandValidationHandler)">
            <summary>
            Registers all handlers.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandValidationHandler{``0})">
            <summary>
            Registers the handler of the specified type.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher.UnregisterHandlers``1">
            <summary>
            Unregisters all handlers for this type.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher.UnregisterHandlers(System.Type)">
            <summary>
            Unregisters all handlers for this type.
            </summary>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher.IsRegistered``1">
            <summary>
            Determines whether this instance has some registered handler.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified type has some handler registered.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns>
              <c>true</c> if the specified command type is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher.ProcessMessage(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Processes the message by calling the registered handler.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.CommandValidationDispatcher.ProcessMessageThroughHierarchy">
            <summary>
            Gets or sets a value indicating whether ProcessMessage method calls all hierarchy validation handlers.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ICommandValidationBus">
            <summary>
            Represents a command validation bus
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ICommandValidationBus.Publish(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Publishes the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ICommandValidationBus.Publish(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Publishes the specified messages.
            </summary>
            <param name="messages">The messages.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult">
            <summary>
            Base class to handle validation results.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult"/> class. With no items, IsOk is true.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult"/> class. With 1 result item.
            </summary>
            <param name="resultType">Type of the result.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult"/> class. With 1 result item without message.
            </summary>
            <param name="resultType">Type of the result.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.Add(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult)">
            <summary>
            Adds the specified result to this one (Merge).
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.AddItem(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem)">
            <summary>
            Adds the specified result item to result.
            </summary>
            <param name="resultItem">The result item.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.AddItem(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType,System.String)">
            <summary>
            Adds a new result item with specified type and message.
            </summary>
            <param name="type">The type.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.AddItem(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType)">
            <summary>
            Adds a new result item with specified type and empty message.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.IsOk">
            <summary>
            Gets a value indicating whether the validation is Ok.
            <c>true</c> if validation has no items or all are Ok; otherwise, <c>false</c>.
            </summary>
            <value>
              <c>true</c> if validation has no items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.HasErrors">
            <summary>
            Gets a value indicating whether this instance has some Error item.
            <c>true</c> if validation has some Error item; otherwise, <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if the validation has Error items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.HasWarnings">
            <summary>
            Gets a value indicating whether this instance has some warning item.
            <c>true</c> if validation has some Warning item; otherwise, <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if this instance has warnings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.Items">
            <summary>
            Gets the validation result items.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.Errors">
            <summary>
            Gets the validation result Error items.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResult.Warnings">
            <summary>
            Gets the validation result Warning items.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.LocalCommandValidationBus">
            <summary>
            Local command validation bus class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.LocalCommandValidationBus.Publish(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Publishes the specified message.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException">If message is null.</exception>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException">If some message handler throws some exception.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.LocalCommandValidationBus.Publish(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Publishes the specified messages.
            </summary>
            <param name="messages">The messages.</param>
            <exception cref="T:System.ArgumentNullException">If some message is null.</exception>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.NullCommandValidationBus">
            <summary>
            Dummy command validation bus
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.NullCommandValidationBus.Publish(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Publishes the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.NullCommandValidationBus.Publish(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Publishes the specified messages.
            </summary>
            <param name="messages">The messages.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.NullCommandValidationBus.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandValidationHandler)">
            <summary>
            Registers the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.NullCommandValidationBus.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandValidationHandler{``0})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.NullCommandValidationBus.IsRegistered``1">
            <summary>
            Determines whether this instance is registered.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.NullCommandValidationBus.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified command type is registered.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem">
            <summary>
            Generic Validation result item information.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem"/> class with 'Unknown' result type and empty message.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem"/> class with specified result type and empty message.
            </summary>
            <param name="resultType">Type of the result.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem"/> class with specified result type and message.
            </summary>
            <param name="resultType">Type of the result.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem.WithMessage(System.String)">
            <summary>
            Sets the message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem.WithType(Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType)">
            <summary>
            Sets the type.
            </summary>
            <param name="resultType">Type of the result.</param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem.Message">
            <summary>
            Gets the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ValidationResultItem.ResultType">
            <summary>
            Gets the type of the result.
            </summary>
            <value>
            The type of the result.
            </value>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType">
            <summary>
            Type of a validation result.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType.Ok">
            <summary>
            The ok
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType.Info">
            <summary>
            The information
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType.Warning">
            <summary>
            The warning
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType.Error">
            <summary>
            The error
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ResultType.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand">
            <summary>
            The base of a command message. A command should contain all the
            information needed to execute the corresponding action.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand">
            <summary>
            Interface of a command message.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand.CommandId">
            <summary>
            Gets the command id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand.UserContext">
            <summary>
            Gets the user context.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand.CommandDate">
            <summary>
            Gets or sets the command originated date.
            </summary>
            <value>
            The command date.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand.ReceptionDate">
            <summary>
            Gets or sets the reception date.
            </summary>
            <value>
            The reception date.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand.BeginProcessDate">
            <summary>
            Gets or sets the begin process date.
            </summary>
            <value>
            The begin process date.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand.EndProcessDate">
            <summary>
            Gets or sets the end process date.
            </summary>
            <value>
            The end process date.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand.CorrelationId">
            <summary>
            Gets the correlation id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand.Module">
            <summary>
            Gets or sets the name of the module that executes this command.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.ICommand.OperationName">
            <summary>
            Gets or sets the name of the operation generated by this command.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.CommandId">
            <summary>
            Gets the command id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.UserContext">
            <summary>
            Gets the user context.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.CommandDate">
            <summary>
            Gets or sets the command originated date.
            </summary>
            <value>
            The command date.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.CorrelationId">
            <summary>
            Gets the correlation id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.ReceptionDate">
            <summary>
            Gets or sets the reception date.
            </summary>
            <value>
            The reception date.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.BeginProcessDate">
            <summary>
            Gets or sets the begin process date.
            </summary>
            <value>
            The begin process date.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.EndProcessDate">
            <summary>
            Gets or sets the end process date.
            </summary>
            <value>
            The end process date.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.Module">
            <summary>
            Gets or sets the name of the module that executes this command.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.BaseCommand.OperationName">
            <summary>
            Gets or sets the name of the operation generated by this command.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1">
            <summary>
            Base abstract class to implement command handlers
            </summary>
            <typeparam name="TCommand">Command Class Type</typeparam>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandHandler`1">
            <summary>
            Class that executes a command.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandHandler">
            <summary>
            Marker interface that makes it easier to discover handlers via reflection. 
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandHandler`1.Handle(`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command to execute. This should not be null.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>command</i> is null.</exception>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.contextFactory">
            <summary>
            Holds the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory"/>. This instance should never be null.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.#ctor(Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory,Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepositoryFactory,Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ICommandValidationBus,Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1"/> class.
            </summary>
            <param name="unitOfWorkFactory">The unit of work factory.</param>
            <param name="domainRepositoryFactory">The domain repository factory.</param>
            <param name="validationBus">The validation bus.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.Handle(`0)">
            <summary>
            Executes the command.
            </summary>
            <param name="command">The command to execute. This should not be null.</param>
            <exception cref="T:System.ArgumentNullException">Occurs when <i>command</i> is null.</exception>
            <exception cref="T:System.ArgumentException">If command.CommandId is Guid.Empty.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.HandleCommand(`0)">
            <summary>
            Executes the command after its validation.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.InitializeHandle(`0)">
            <summary>
            Initializes the handler TenantId and DomainRepository.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.ExecuteHandle(`0)">
            <summary>
            Executes the handle actions. Saves command blobs, handles the command and saves the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.logger">
            <summary>
            Gets or sets the logger.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.TenantId">
            <summary>
            Gets or sets the tenant id.
            </summary>
            <value>
            The tenant id.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.ApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.TenantResolver">
            <summary>
            Gets the tenant resolver.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.ContextFactory">
            <summary>
            Gets the event context factory.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.DomainRepositoryFactory">
            <summary>
            Gets the domain repository factory.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.DomainRepository">
            <summary>
            Gets the domain repository.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandler`1.ValidationResult">
            <summary>
            Gets the validation result.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1">
            <summary>
            Base class for command validation handler.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandValidationHandler`1">
            <summary>
            Represents a handler for validate TCommand
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException">Exception when validation fails.</exception>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandValidationHandler">
            <summary>
            Marker interface that makes it easier to discover handlers via reflection.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.ICommandValidationHandler`1.Validate(`0)">
            <summary>
            Validates the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1.logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1.#ctor(Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepositoryFactory,Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1"/> class.
            </summary>
            <param name="domainRepositoryFactory">The domain repository factory.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1.Validate(`0)">
            <summary>
            Validates the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1.ValidateCommand(`0)">
            <summary>
            Validates the command before its execution.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1.TenantId">
            <summary>
            Gets the tenant identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1.TenantResolver">
            <summary>
            Gets the tenant resolver.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1.DomainRepositoryFactory">
            <summary>
            Gets the domain repository factory.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandValidationHandler`1.DomainRepository">
            <summary>
            Gets the domain repository.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException">
            <summary>
            Command generic exception.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException"/> class.
            </summary>
            <param name="cause">The cause.</param>
            <param name="solution">The solution.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="solution">The solution.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionException">
            <summary>
            Class for command execution exceptions.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionException"/> class.
            </summary>
            <param name="commandId">The command identifier.</param>
            <param name="message">The message.</param>
            <param name="exceptionData">The exception data.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
            </PermissionSet>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionException.CommandId">
            <summary>
            Gets the command identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandExecutionException.OrignalExceptionData">
            <summary>
            Gets the orignal exception data.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException">
            <summary>
            Occurs when no handler is found to execute a command.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException"/> class.
            </summary>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException"/> class.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException"/> class.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="message">The message.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException.CommandType">
            <summary>
            Gets the type of the command.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandlerInTransaction`1">
            <summary>
            Wraps a command handler to execute the command inside a UnitOfWork
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandlerInTransaction`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandlerInTransaction`1"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandlerInTransaction`1.#ctor(Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory,Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepositoryFactory,Mecalux.ITSW.Core.Infrastructure.Bus.Validation.ICommandValidationBus,Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandlerInTransaction`1"/> class.
            </summary>
            <param name="unitOfWorkFactory">The unit of work factory.</param>
            <param name="domainRepositoryFactory">The domain repository factory.</param>
            <param name="validationBus">The validation bus.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandlerInTransaction`1.ExecuteHandle(`0)">
            <summary>
            Executes the handle actions. Saves command blobs, handles the command and saves the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.BaseCommandHandlerInTransaction`1.Context">
            <summary>
            Context where the actions are done.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException">
            <summary>
            Command validation exception class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException"/> class.
            </summary>
            <param name="cause">The cause.</param>
            <param name="solution">The solution.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException"/> class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="solution">The solution.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.DuplicateCommandHandlerException">
            <summary>
            Duplicate command handler exception. ONE command handler can have only ONE Handler
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.DuplicateCommandHandlerException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.DuplicateCommandHandlerException"/> class.
            </summary>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.DuplicateCommandHandlerException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.DuplicateCommandHandlerException"/> class.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.DuplicateCommandHandlerException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.DuplicateCommandHandlerException"/> class.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="message">The message.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.DuplicateCommandHandlerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.DuplicateCommandHandlerException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.DuplicateCommandHandlerException.CommandType">
            <summary>
            Gets the type of the command.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.LocalCommandBus">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus">
            <summary>
            Represents a command bus
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus.Execute(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Executes the given command
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus.Execute(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand}})">
            <summary>
            Executes the commands and returns their results
            </summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus.Send(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Sends the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus.Send(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand}})">
            <summary>
            Sends the specified commands.
            </summary>
            <param name="commands">The commands.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalCommandBus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.LocalCommandBus"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalCommandBus.Execute(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Executes the specified command synchronously.
            </summary>
            <param name="command">The command.</param>
            <returns>Command execution result</returns>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException">If specified command has no registered handler.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalCommandBus.Execute(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand}})">
            <summary>
            Executes the specified commands synchronously.
            </summary>
            <param name="commands">The commands.</param>
            <returns>Command execution result</returns>
            <exception cref="T:System.AggregateException"></exception>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Handling.CommandHandlerNotFoundException">If some command has no registered handler.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalCommandBus.Send(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Sends the command asynchronously.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalCommandBus.Send(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand}})">
            <summary>
            Sends the commands asynchronously.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandSerializer">
            <summary>
            An interface for a CommandSerializer
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandSerializer.Serialize(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Serializes the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedCommand">The serialized command.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStore">
            <summary>
            Represents a store repository for ICommand
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStore.GetCommands(System.Type)">
            <summary>
            Gets the commands.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStore.GetCommands(System.Int32,System.Int32)">
            <summary>
            Gets the commands.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStore.GetCommandsEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets the commands enumerator.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStore.GetCommand(System.Guid)">
            <summary>
            Gets the command.
            </summary>
            <param name="commandId">The command identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStore.GetCommandsCount">
            <summary>
            Gets the commands count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStore.Store(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Stores the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Stores the specified commands.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStoreEnable">
            <summary>
            Store repository for ICommand with storage Enable/Disable flag
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStoreEnable.StoreEnabled">
            <summary>
            Gets or sets a value indicating whether storage is enabled.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore">
            <summary>
            In memory command store class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore.Store(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Stores the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Stores the specified commands.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore.GetCommands(System.Type)">
            <summary>
            Gets the commands.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore.GetCommand(System.Guid)">
            <summary>
            Gets the command.
            </summary>
            <param name="commandId">The command identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore.GetCommands(System.Int32,System.Int32)">
            <summary>
            Gets the commands.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore.GetCommandsEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets the commands enumerator.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore.GetCommandsCount">
            <summary>
            Gets the commands count.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.InMemoryCommandStore.StoreEnabled">
            <summary>
            Gets or sets a value indicating whether storage is enabled.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.NullCommandStore">
            <summary>
            Dummy command store.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.NullCommandStore.GetCommands(System.Type)">
            <summary>
            Gets the commands.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.NullCommandStore.GetCommand(System.Guid)">
            <summary>
            Gets the command.
            </summary>
            <param name="commandId">The command identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.NullCommandStore.Store(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Stores the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.NullCommandStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Stores the specified commands.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.NullCommandStore.GetCommands(System.Int32,System.Int32)">
            <summary>
            Gets the commands.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.NullCommandStore.GetCommandsEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets the commands enumerator.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Commands.Storage.NullCommandStore.GetCommandsCount">
            <summary>
            Gets the commands count.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.BaseAggregateEntityEvent">
            <summary>
            Base aggregate event for entity operation, i.e. delete an entity.
            This is not an IEntityEvent, and must by applied in an AggregateRoot.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent">
            <summary>
            The base of a domain event message.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent"/> class.
            </summary>
            <param name="sourceId">The aggregate source id.</param>
            <exception cref="T:System.ArgumentException">If sourceId is Guid.Empty</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.#ctor(System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent"/> class.
            </summary>
            <param name="sourceId">The aggregate source id.</param>
            <param name="version">The version.</param>
            <exception cref="T:System.ArgumentException">If sourceId is Guid.Empty</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.EventId">
            <summary>
            Gets the event id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.SourceId">
            <summary>
            Gets the identifier of the source aggregate root originating the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.EventDate">
            <summary>
            Gets the event originated date.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.ApplyDate">
            <summary>
            Gets or sets the apply date.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.Sequence">
            <summary>
            Gets the event sequence.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.ContextSequence">
            <summary>
            Order of the event in the context where it was created.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.Version">
            <summary>
            Gets the event version.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.UserContext">
            <summary>
            Gets the user context originating the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.CommandId">
            <summary>
            Gets or sets the identifier of the source command that generated the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.CommandName">
            <summary>
            Gets or sets the name of the source command that generated the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.ProcessId">
            <summary>
            Gets or sets the name of the process that generated the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.ProcessName">
            <summary>
            Gets or sets the identifier of the process that generated the event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEvent.ProcessEquipment">
            <summary>
            Gets or sets the process equiment.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.BaseAggregateEntityEvent.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.BaseAggregateEntityEvent"/> class.
            </summary>
            <param name="sourceId">The source id.</param>
            <param name="entityId">The entity id.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.BaseAggregateEntityEvent.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.BaseAggregateEntityEvent"/> class.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.BaseAggregateEntityEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseAggregateEntityEvent.EntityId">
            <summary>
            Gets the entity identifier.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotSerializer">
            <summary>
            ISnapshotSerializer interface
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotSerializer.Serialize(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot)">
            <summary>
            Serializes the specified snapshot.
            </summary>
            <param name="snapshot">The snapshot.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedSnapshot">The serialized snapshot.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Processes.ICorrelatedProcessManager">
            <summary>
            Represents a ProcessManager.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.ICorrelatedProcessManager.AddCommand(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Adds the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.ICorrelatedProcessManager.ClearCommands">
            <summary>
            Clears the commands.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.ICorrelatedProcessManager.Execute">
            <summary>
            Runs the commands.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.ICorrelatedProcessManager.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.ICorrelatedProcessManager.TenantId">
            <summary>
            Gets the tenant identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.ICorrelatedProcessManager.CorrelationId">
            <summary>
            Gets the correlation id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.ICorrelatedProcessManager.Completed">
            <summary>
            Gets a value indicating whether the process manager workflow is completed and the state can be archived.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager">
            <summary>
            Correlated command execution class.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.commands">
            <summary>
            The commands
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.commandBus">
            <summary>
            The command bus
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.repositoryFactory">
            <summary>
            The repository factory
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager"/> class.
            </summary>
            <param name="commandBus">The command bus.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.ICommandBus,Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory,Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepositoryFactory,Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager"/> class.
            </summary>
            <param name="commandBus">The command bus.</param>
            <param name="uowFactory">The uow factory.</param>
            <param name="repositoryFactory">The repository factory.</param>
            <param name="tenantResolver">The tenant resolver.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.AddCommand(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Adds the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.ClearCommands">
            <summary>
            Clears the commands.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.Execute">
            <summary>
            Runs the commands.
            </summary>
            <exception cref="T:System.InvalidOperationException">Execution has been already completed</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.PrepareRun">
            <summary>
            Prepares the run. Initializes the repository.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.ExecuteCommands">
            <summary>
            Execute the commands via command bus.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.SetCompleted">
            <summary>
            Sets as completed.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.CheckValidCommand(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Checks if a command is related with the tenant.
            </summary>
            <param name="command">The command.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.TenantId">
            <summary>
            Gets the tenant id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.TenantResolver">
            <summary>
            Gets the tenant resolver.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.ContextFactory">
            <summary>
            Gets the domain context factory.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.DomainRepository">
            <summary>
            Gets the domain repository.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.Id">
            <summary>
            Gets the process manager  id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.CorrelationId">
            <summary>
            Gets the correlation id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.Completed">
            <summary>
            Gets a value indicating whether the process workflow is completed and the state can be archived.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.CorrelatedProcessManager.Commands">
            <summary>
            Gets the commands to execute.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo">
            <summary>
            Infrastructure process information
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.Id">
            <summary>
            Gets the process identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.DefinitionId">
            <summary>
            Gets the process definition identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.MainProcessId">
            <summary>
            Gets the main process identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.ApplicationName">
            <summary>
            Gets the process application name.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.Module">
            <summary>
            Gets or sets the header string.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.Node">
            <summary>
            Node.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.NodeId">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.Equipment">
            <summary>
            Equipment.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.Document">
            <summary>
            Gets the document code.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.DocumentId">
            <summary>
            Gets the document identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryCommandSerializer">
            <summary>
            A binary command serializer
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryCommandSerializer.Serialize(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Serializes the specified domain event.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryCommandSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedCommand">The serialized command.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryObjectSerializer">
            <summary>
            Binary object serializer.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.ITextWriterSerializer">
            <summary>
            Interface for serializers that can read/write an object graph to a stream.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.ITextWriterSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes an object graph to a text reader.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.ITextWriterSerializer.Deserialize(System.Type,System.IO.TextReader)">
            <summary>
            Deserializes an object graph from the specified text reader.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.ITextSerializer">
            <summary>
            Interface for serializers that can read/write an object graph to a string.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.ITextSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified value to a string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.ITextSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type from a string.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedValue">The serialized value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryObjectSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryObjectSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes an object graph to a text reader.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryObjectSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedValue">The serialized value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryObjectSerializer.Deserialize(System.Type,System.IO.TextReader)">
            <summary>
            Deserializes an object graph from the specified text reader.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinarySerializer">
            <summary>
            An object binary serializer
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinarySerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinarySerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinarySerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedObject">The serialized object.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinarySerializer.Deserialize(System.Type,System.IO.TextReader)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinarySnapshotSerializer">
            <summary>
            A binary snapshot serializer
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinarySnapshotSerializer.Serialize(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot)">
            <summary>
            Serializes the specified snapshot.
            </summary>
            <param name="snapshot">The snapshot.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinarySnapshotSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedSnapshot">The serialized snapshot.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonSerializer">
            <summary>
            Json serializer
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonSerializer.Config">
            <summary>
            The configuration
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedValue">The serialized value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonSerializer.Deserialize(System.Type,System.IO.TextReader)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonSnapshotSerializer">
            <summary>
            A Json serializer for snapshots
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonSnapshotSerializer.Serialize(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot)">
            <summary>
            Serializes the specified snapshot.
            </summary>
            <param name="snapshot">The snapshot.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonSnapshotSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedSnapshot">The serialized snapshot.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvObjectSerializer">
            <summary>
            JSV (JSON-like Separated Values) object serializer.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvObjectSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvObjectSerializer"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvObjectSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified value to a string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvObjectSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes an object graph to a text reader.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvObjectSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type from a string.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedValue">The serialized value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvObjectSerializer.Deserialize(System.Type,System.IO.TextReader)">
            <summary>
            Deserializes an object graph from the specified text reader.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSerializer">
            <summary>
            JSV (JSON-like Separated Values) object serializer.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSerializer.Config">
            <summary>
            The configuration
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSerializer.Serialize(System.Object)">
            <summary>
            Serializes the type.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedValue">The serialized value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSerializer.Deserialize(System.Type,System.IO.TextReader)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSnapshotSerializer">
            <summary>
            Jsv snapshot serializer.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSnapshotSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSnapshotSerializer"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSnapshotSerializer.Serialize(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot)">
            <summary>
            Serializes the specified snapshot.
            </summary>
            <param name="snapshot">The snapshot.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Jsv.JsvSnapshotSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedSnapshot">The serialized snapshot.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Statistics.ContextStatsExtensions">
            <summary>
            Query stats extension methods
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Statistics.ContextStatsExtensions.GetLogFormat(Mecalux.ITSW.Core.Infrastructure.Statistics.IQueryStats)">
            <summary>
            Gets the query filter stats.
            </summary>
            <param name="stats">The stats.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Statistics.IContextStats">
            <summary>
            Context statistics
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Statistics.IContextStats.QueryStats">
            <summary>
            Gets the query stats.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Statistics.IQueryFilterStats">
            <summary>
            Query filter statistics
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Statistics.IQueryFilterStats.Level">
            <summary>
            Gets the level.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Statistics.IQueryFilterStats.Name">
            <summary>
            Filter name
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Statistics.IQueryFilterStats.Calls">
            <summary>
            Num calls to predicate
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Statistics.IQueryFilterStats.Matches">
            <summary>
            Gets the matches.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Statistics.IQueryStats">
            <summary>
            Query statistics
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Statistics.IQueryStats.Name">
            <summary>
            Gets the query name.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Statistics.IQueryStats.QueryFilterStats">
            <summary>
            Gets the query filter stats.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver">
            <summary>
            Resolves tenant configuration
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.Exists(System.Guid)">
            <summary>
             Checks if the specified tenant exists.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetTenantId(System.String)">
            <summary>
            Gets the tenant identifier.
            </summary>
            <param name="tenantCode">The tenant code.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetTenantName(System.Guid)">
            <summary>
            Gets the name of the tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetTenantCode(System.Guid)">
            <summary>
            Gets the tenant code.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetRepositoryNameFromId(System.Guid)">
            <summary>
            Gets the repository name from identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetRepositoryNameFromId(System.Guid,System.String)">
            <summary>
            Gets the repository name from identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="moduleName">Name of the module.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetADDatabaseConnection(System.Guid)">
            <summary>
            Gets the ad database connection.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetReadDatabaseConnection(System.Guid)">
            <summary>
            Gets the read database connection.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetDataWarehouseDatabaseConnection(System.Guid)">
            <summary>
            Gets the data warehouse database connection.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetLuceneInfo(System.Guid)">
            <summary>
            Gets the lucene information.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetProcessesInfo(System.Guid)">
            <summary>
            Gets the tenant processes information.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ITenantResolver.GetTelemetryInfo(System.Guid)">
            <summary>
            Gets the telemetry information.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant">
            <summary>
            A tenant information.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.#ctor(System.Guid,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
            <param name="code">The code.</param>
            <param name="auditEnabled">if set to <c>true</c> [audit enabled].</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant"/> class.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.TenantId">
            <summary>
            Gets or sets the tenant identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.Code">
            <summary>
            Gets or sets the code.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.AuditEnabled">
            <summary>
            Gets or sets a value indicating whether audit is enabled.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.EventStoreConnection">
            <summary>
            Gets or sets the event store connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.SnapshotStoreConnection">
            <summary>
            Gets or sets the snapshot store connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.CommandStoreConnection">
            <summary>
            Gets or sets the command store connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.BlobStoreConnection">
            <summary>
            Gets or sets the BLOB store connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.ProcessStoreConnection">
            <summary>
            Gets or sets the process store connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.ADDatabaseConnection">
            <summary>
            Gets or sets the ad database connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.ReadDatabaseConnection">
            <summary>
            Gets or sets the read database connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.DataWarehouseConnection">
            <summary>
            Gets or sets the datawarehouse database connection.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.Lucene">
            <summary>
            Gets or sets the lucene information.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.Processes">
            <summary>
            Gets or sets the processes.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant.Telemetry">
            <summary>
            Gets or sets the telemetry information.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Tenants.ConnectionInfo">
            <summary>
            A connection information
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ConnectionInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.ConnectionInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">Name of the provider.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.ConnectionInfo"/> class.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.ConnectionInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.ConnectionInfo.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.ConnectionInfo.ProviderName">
            <summary>
            Gets or sets the name of the provider.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Tenants.LuceneInfo">
            <summary>
            Lucene information
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.LuceneInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.LuceneInfo"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.LuceneInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.LuceneInfo"/> class.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.LuceneInfo.Directory">
            <summary>
            Gets or sets the directory.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Tenants.ProcessesInfo">
            <summary>
            Processes information
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ProcessesInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.ProcessesInfo"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.ProcessesInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.ProcessesInfo"/> class.
            </summary>
            <param name="logonApplicationName">Name of the logon application.</param>
            <param name="logonProcessName">Name of the logon process.</param>
            <param name="mainApplicationName">Name of the main application.</param>
            <param name="mainProcessName">Name of the main process.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.ProcessesInfo.LogonApplicationName">
            <summary>
            Gets or sets the name of the logon application.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.ProcessesInfo.LogonProcessName">
            <summary>
            Gets or sets the name of the logon process.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.ProcessesInfo.MainApplicationName">
            <summary>
            Gets or sets the name of the main application.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.ProcessesInfo.MainProcessName">
            <summary>
            Gets or sets the name of the main process.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Tenants.TelemetryInfo">
            <summary>
            Telemetry information
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TelemetryInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.TelemetryInfo"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TelemetryInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.TelemetryInfo"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TelemetryInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.TelemetryInfo"/> class.
            </summary>
            <param name="key">The key.</param>
            <param name="isEnabled">if set to <c>true</c> [is enabled].</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.TelemetryInfo.Key">
            <summary>
            Gets or sets the telemetry key.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.TelemetryInfo.IsEnabled">
            <summary>
            Gets or sets telemetry is enabled value.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantCollection">
            <summary>
            A Tenant collection
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantCollection"/> class.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantCollection.Tenants">
            <summary>
            Gets the tenants.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver">
            <summary>
            Tenant information resolver
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.InitializedFromList(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Tenants.Tenant})">
            <summary>
            Initializes from list.
            </summary>
            <param name="tenants">The tenants.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.InitializedFromConfig">
            <summary>
            Initializes from app config section.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.InitializedFromXml(System.String)">
            <summary>
            Initializes from tenant XML file.
            </summary>
            <param name="fileName">The filename.</param>
            <exception cref="T:System.ArgumentNullException">If filename is a null or empty string.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in filename was not found.</exception> 
            <exception cref="T:System.Configuration.ConfigurationErrorsException">If xml file is wrong or other reasons.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.InitializedFromSection(Mecalux.ITSW.Core.Abstraction.Configuration.TenantsSection)">
            <summary>
            Initializes from section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetAuditEnabled(System.Guid)">
            <summary>
            Gets the audit enabled.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.Exists(System.Guid)">
            <summary>
            Checks if the specified tenant exists.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetTenantId(System.String)">
            <summary>
            Gets the tenant identifier by tenant name.
            </summary>
            <param name="tenantCode">The tenant code.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetTenantName(System.Guid)">
            <summary>
            Gets the name of the tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetTenantCode(System.Guid)">
            <summary>
            Gets the tenant code.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetRepositoryNameFromId(System.Guid)">
            <summary>
            Gets the name of a tenant repository from tenantId.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetRepositoryNameFromId(System.Guid,System.String)">
            <summary>
            Gets the repository name from a tenant id.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <param name="moduleName">Name of the module.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetADDatabaseConnection(System.Guid)">
            <summary>
            Gets the AD database connection string.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetReadDatabaseConnection(System.Guid)">
            <summary>
            Gets the read database connection string.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetDataWarehouseDatabaseConnection(System.Guid)">
            <summary>
            Gets the data warehouse database connection string.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetLuceneInfo(System.Guid)">
            <summary>
            Gets the lucene information.
            </summary>
            <param name="tenantId">The tenant id.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Tenant not found.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetProcessesInfo(System.Guid)">
            <summary>
            Gets the processes information.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Tenant not found.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.GetTelemetryInfo(System.Guid)">
            <summary>
            Gets the telemetry information.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Tenant not found.</exception>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResolver.Tenants">
            <summary>
            Gets the tenants.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot">
            <summary>
            Aggregate root base class.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource">
            <summary>
            Base Event source class
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1">
            <summary>
            Base domain entity class.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1.ApplyEventToInternalState(`0)">
            <summary>
            Call the event handler for this event.
            </summary>
            <param name="event">The event.</param>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1.AutoRegisterEvents">
            <summary>
            Automatics the register events.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1.GetEventHandlers">
            <summary>
            Gets the event handlers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1.RegisterEvent(System.Type,System.Action{`0})">
            <summary>
            Registers the event.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandler">The event handler.</param>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1.GetEventHandlerMethod(System.Type,System.Type)">
            <summary>
            Gets the event handler method.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="aggregateRootType">Type of the aggregate root.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1.GetEventHandlerMethodName(System.String)">
            <summary>
            Gets the name of the event handler method.
            </summary>
            <param name="domainEventTypeName">Name of the domain event type.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1.EventHandlerMethodInfoHasCorrectParameter(System.Reflection.MethodInfo,System.Type)">
            <summary>
            Events the handler method information has correct parameter.
            </summary>
            <param name="eventHandlerMethodInfo">The event handler method information.</param>
            <param name="domainEventType">Type of the domain event.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1.RaiseOnEventApplied(`0)">
            <summary>
            Raises the on event applied.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1.InternalEventHandlers">
            <summary>
            Gets the internal event handlers.
            </summary>
        </member>
        <member name="E:Mecalux.ITSW.Core.Infrastructure.Domain.BaseEntity`1.EventApplied">
            <summary>
            Occurs when [event applied].
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.uncommittedEvents">
            <summary>
            The uncommitted events
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.LoadFromHistoricalEvents(Mecalux.ITSW.Core.Infrastructure.Events.IEvent[])">
            <summary>
            Loads the instance from historical events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.ClearUncommittedEvents">
            <summary>
            Clears the uncommitted events.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.UpdateSequence">
            <summary>
            Updates the sequence to the last event sequence.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.Apply(Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Updates the event sequence. Applies the event. Enqueues the event to UncommittedEvents queue.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.UpdateSequences(System.Int64,System.Int64)">
            <summary>
            Updates the Sequence and LastEventSequence properties.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="lastEventSequence">The last event sequence.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in
            a log friendly format.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance in
            a log friendly format.
            </returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.Id">
            <summary>
            Gets the EventSource Id (e.g. AggregateRoot Id).
            </summary>
            <exception cref="T:System.InvalidOperationException">If value is Guid.Empty</exception>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.Sequence">
            <summary>
            Gets the EventSource's actual sequence number.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.LastEventSequence">
            <summary>
            Gets the EventSource's actual event sequence number. As the EventSource is being updated and events being generated, the sequence is incremented.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.LoadingFromHistory">
            <summary>
            Gets or sets a value indicating whether this instance is loading from historical events.
            </summary>
            <value>
              <c>true</c> if [loading from history]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.EventSource.UncommittedEvents">
            <summary>
            Gets the collection of new events since the EventSource was loaded, as a consequence of command handling.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.Apply(Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Updates the event sequence. Applies the event. Enqueues the event to UncommittedEvents queue.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.RegisterEntity(Mecalux.ITSW.Core.Infrastructure.Domain.IEntity)">
            <summary>
            Registers the entity in this aggregate root.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.UnregisterEntity(Mecalux.ITSW.Core.Infrastructure.Domain.IEntity)">
            <summary>
            Unregisters the entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.GetRegisteredEntitiesCount">
            <summary>
            Gets the number of registered entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.LoadFromHistoricalEvents(Mecalux.ITSW.Core.Infrastructure.Events.IEvent[])">
            <summary>
            Loads the instance from historical events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.GetEntity``1(System.Guid)">
            <summary>
            Returns the entity of this aggregate of type <typeparamref name="TEntity"/> with
            id <paramref name="entityId"/>
            </summary>
            <typeparam name="TEntity">Type of the entity</typeparam>
            <param name="entityId">Entity id</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.ExistsEntity``1(System.Guid)">
            <summary>
            Returns true if the aggregate has an entity of type <typeparamref name="TEntity"/> with
            id <paramref name="entityId"/>
            </summary>
            <typeparam name="TEntity">Type of the entity</typeparam>
            <param name="entityId">Entity id</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.ApplyEventFromHistoric(Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Calls the aggregate or entity event handler.
            Called when the aggregate is loaded from historical events, when an event is applied.
            </summary>
            <param name="e">The e.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.UnregisterAllEntities">
            <summary>
            Unregisters all entities registered on the aggregate.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in
            a log friendly format.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance in
            a log friendly format.
            </returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot.TenantId">
            <summary>
            Gets the tenant identifier.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException">
            <summary>
            Aggregate not found exception
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException.#ctor(System.Guid,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException"/> class.
            </summary>
            <param name="aggregateRootId">The aggregate root identifier.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException.#ctor(System.Guid,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException"/> class.
            </summary>
            <param name="aggregateRootId">The aggregate root identifier.</param>
            <param name="type">The type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException.#ctor(System.Guid,System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException"/> class.
            </summary>
            <param name="aggregateRootId">The aggregate root identifier.</param>
            <param name="type">The type.</param>
            <param name="message">The message.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException.AggregateRootId">
            <summary>
            Gets the aggregate root identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException.Type">
            <summary>
            Gets the aggregate type.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="sourceType">Type of the source.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException.#ctor(System.Type,System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="message">The message.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.AlreadyRegisteredEventException.SourceType">
            <summary>
            Gets the type of the source.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException">
            <summary>
            Aggregateroot events concurrency exception class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException.#ctor(System.Guid,System.Int64,System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException"/> class.
            </summary>
            <param name="aggregateRootId">The aggregate root identifier.</param>
            <param name="sequence">The sequence.</param>
            <param name="expectedSequence">The expected sequence.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException.#ctor(System.Guid,System.Int64,System.Int64,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException"/> class.
            </summary>
            <param name="aggregateRootId">The aggregate root identifier.</param>
            <param name="sequence">The sequence.</param>
            <param name="expectedSequence">The expected sequence.</param>
            <param name="message">The message.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException.AggregateRootId">
            <summary>
            Gets the aggregate root identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException.Sequence">
            <summary>
            Gets the sequence.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.DomainEventsConcurrencyException.ExpectedSequence">
            <summary>
            Gets the expected sequence.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepositoryFactory">
            <summary>
            Factory to create a DomainRepository using InfrastructureEnvironment IEventStore, ISnapshotStore and IEventBus
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepositoryFactory">
            <summary>
            Domain repository factory
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepositoryFactory.CreateRepository(System.String)">
            <summary>
            Creates the repository.
            </summary>
            <param name="repositoryName">Name of the repository.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepositoryFactory.CreateRepository(System.String)">
            <summary>
            Creates the repository.
            </summary>
            <param name="repositoryName">Name of the repository.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.Entity">
            <summary>
            Domain entity class.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IEntity">
            <summary>
            Represents an identifiable entity in the system that can be part of an IAggregateRoot
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IEntity.Register(Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot,System.EventHandler{Mecalux.ITSW.Core.Infrastructure.Domain.EventAppliedEventArgs{Mecalux.ITSW.Core.Infrastructure.Events.IEntityEvent}})">
            <summary>
            Registers the specified parent.
            </summary>
            <param name="parent">The parent.</param>
            <param name="eventApplied">The event applied.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IEntity.Unregister(System.EventHandler{Mecalux.ITSW.Core.Infrastructure.Domain.EventAppliedEventArgs{Mecalux.ITSW.Core.Infrastructure.Events.IEntityEvent}})">
            <summary>
            Unregisters from parent.
            </summary>
            <param name="eventApplied">The event applied.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IEntity.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IEntity.AggregateRootId">
            <summary>
            Gets the aggregate root identifier.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.Entity.AggregateRoot">
            <summary>
            The aggregate root
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.Entity.#ctor(Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.Entity"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="entityId">The entity identifier.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.Entity.UnregisterFromParent">
            <summary>
            Unregisters this entity from parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.Entity.Apply(Mecalux.ITSW.Core.Infrastructure.Events.IEntityEvent)">
            <summary>
            Applies the specified event.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.Entity.Register(Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot,System.EventHandler{Mecalux.ITSW.Core.Infrastructure.Domain.EventAppliedEventArgs{Mecalux.ITSW.Core.Infrastructure.Events.IEntityEvent}})">
            <summary>
            Registers the specified parent.
            </summary>
            <param name="parent">The parent.</param>
            <param name="eventApplied">The event applied.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.Entity.Unregister(System.EventHandler{Mecalux.ITSW.Core.Infrastructure.Domain.EventAppliedEventArgs{Mecalux.ITSW.Core.Infrastructure.Events.IEntityEvent}})">
            <summary>
            Unregisters from parent.
            </summary>
            <param name="eventApplied">The event applied.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.Entity.Id">
            <summary>
            Gets or sets the entity id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.Entity.AggregateRootId">
            <summary>
            Gets the parent aggregate root id. Guid.Empty if entity has no parent.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventAppliedEventArgs`1">
            <summary>
            Event applied args
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.EventAppliedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventAppliedEventArgs`1"/> class.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.EventAppliedEventArgs`1.Event">
            <summary>
            Gets the event.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IRepository">
            <summary>
            Repository interface
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IRepository.Set``1">
            <summary>
            Sets this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IRepository.Add``1(``0)">
            <summary>
            Adds the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IRepository.Remove``1(``0)">
            <summary>
            Removes the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IRepository.ExistId``1(``0)">
            <summary>
            Exists the identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IRepository.ExistId``1(System.Guid)">
            <summary>
            Exists the identifier.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IRepository.GetEntity``1(System.Guid)">
            <summary>
            Gets the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IRepository.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.BaseEntityEvent">
            <summary>
            Base entity event class.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.IEntityEvent">
            <summary>
             Represents a domain entity event.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.IEntityEvent.EntityId">
            <summary>
            Gets the entity identifier.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.BaseEntityEvent.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.BaseEntityEvent"/> class.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <param name="entityId">The entity identifier.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.BaseEntityEvent.#ctor(System.Guid,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.BaseEntityEvent"/> class.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <param name="entityId">The entity identifier.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.BaseEntityEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.BaseEntityEvent.EntityId">
            <summary>
            Gets or sets the entity identifier.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException">
            <summary>
            Unregistered event exception
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="sourceType">Type of the source.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException.#ctor(System.Type,System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="message">The message.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException.Type">
            <summary>
            Gets the event type.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UnregisteredEventException.SourceType">
            <summary>
            Gets the type of the source.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext">
            <summary>
            Identifies an origin site and user
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called when [deserialized method].
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext.TenantId">
            <summary>
            Tenant Identifier
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext.CountryCode">
            <summary>
            CountryCode, country code to choose the application language
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext.ComputerName">
            <summary>
            Computer's name
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext.ClientType">
            <summary>
            Type of the client terminal.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext.ClientScreenWidth">
            <summary>
            Width of the client screen.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UserContext.ClientScreenHeight">
            <summary>
            Height of the client screen.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.ClientType">
            <summary>
            Client type
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.ClientType.PC">
            <summary>
            PC client
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.ClientType.RF">
            <summary>
            RF terminal client
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.ClientType.Voice">
            <summary>
            Voice terminal client
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository">
            <summary>
            Writing Domain repository
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository">
            <summary>
            Domain repository to manage domain AggregateRoots.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.GetById``1(System.Guid)">
            <summary>
            Gets an AggregateRoot by Id.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRootId">The aggregate root identifier.</param>
            <returns>
            null if the aggrgate does not exist.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.GetExistingById``1(System.Guid)">
            <summary>
            Gets an aggregate root by Id. Fails if does not exist
            </summary>
            <typeparam name="TAggregateRoot">Aggregate root entity</typeparam>
            <param name="aggregateRootId">Aggregate root ID</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException">If the aggregate does not exist.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.Set``1">
            <summary>
            Gets the set of all instances of an TAggregateRoot from historical events and snapshot.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.Set(System.Type)">
            <summary>
            Gets the set of all instances of an AggregateRoot type from historical events and snapshot.
            </summary>
            <param name="aggregateRootType">Type of the aggregate root.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.Set">
            <summary>
            Gets the set of all AggregateRoots from historical events and snapshot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.Set(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Mecalux.ITSW.Core.Infrastructure.Events.IEvent,System.Type}})">
            <summary>
            Gets the set of all AggregateRoots from specified historical events and snapshots.
            </summary>
            <param name="snapshots">The snapshots.</param>
            <param name="events">The events.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.Save``1(``0)">
            <summary>
            Saves the aggregate root events into the event store.
            Publishes the aggregate root events in the event bus.
            Saves the aggregate root snapshots into the snapshot store.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoot">The aggregate root.</param>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"/>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves the aggregate root events into the event store in one transaction.
            Publishes the aggregate root events in the event bus.
            Saves each aggregate root snapshot into the snapshot store.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoots">The aggregate roots.</param>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"/>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.Store``1(``0)">
            <summary>
            Stores the specified aggregate root.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoot">The aggregate root.</param>
            <returns>Stored events.</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.StoreAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Stores the specified aggregate roots.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoots">The aggregate roots.</param>
            <returns>Stored events.</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.GetPackages``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the packages.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoots">The aggregate roots.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.Publish(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the specified events.
            </summary>
            <param name="events">The events.</param>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.PublishAsync(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the specified events asynchronously.
            </summary>
            <param name="events">The events.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveSnapshot(Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot)">
            <summary>
            Saves the snapshot.
            </summary>
            <param name="aggregateRoot">The aggregate root.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveSnapshots``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves the snapshots.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoots">The aggregate roots.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveSnapshotAsync(Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot)">
            <summary>
            Saves the snapshot asynchronous.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveSnapshotsAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves the snapshots asynchronous.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoots">The aggregate roots.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.TakeSnapshots(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator},System.Threading.CancellationToken)">
            <summary>
            Takes the snapshots.
            </summary>
            <param name="aggregateRoots">The aggregate roots.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.TakeSnapshotsAsync(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator},System.Threading.CancellationToken)">
            <summary>
            Takes the snapshots asynchronous.
            </summary>
            <param name="aggregateRoots">The aggregate roots.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveCommand``1(``0)">
            <summary>
            Saves the specified command in ICommandStore.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveCommands(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Saves the specified commands in ICommandStore.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveCommandAsync``1(``0)">
            <summary>
            Saves the command asynchronous.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveCommandsAsync(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Saves the commands asynchronous.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveBlob(System.String,System.Byte[])">
            <summary>
            Saves the BLOB in IBlobStore.
            </summary>
            <param name="id">The id.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.SaveBlobs(System.Collections.Generic.Dictionary{System.String,System.Byte[]})">
            <summary>
            Saves the blobs in IBlobStore.
            </summary>
            <param name="blobs">The blobs.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.DeleteBlob(System.String)">
            <summary>
            Deletes the BLOB.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.DeleteBlobs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes the blobs.
            </summary>
            <param name="blobIds">The BLOB ids.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.GetBlob(System.String)">
            <summary>
            Gets the BLOB.
            </summary>
            <param name="id">The id.</param>
            <returns>null if the blob does not exist.</returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository.BlobStore">
            <summary>
            Gets the BLOB store.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepositoryRetry">
            <summary>
            Methods related to retry operations on domain repository
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepositoryRetry.StoreSucceeded``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tries to detect if previous store operation actually succeeded. If it is
            uncertain wheter it succeeded, it will return false.
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <param name="aggregateRoots">Aggregates that had to be stored</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.#ctor(Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStore,Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore,Mecalux.ITSW.Core.Infrastructure.Bus.IEventBus,Mecalux.ITSW.Core.Infrastructure.Commands.Storage.ICommandStore,Mecalux.ITSW.Core.Infrastructure.BlobStorage.IBlobStore)">
            <summary>
            Creates a repository
            </summary>
            <param name="eventStore">EventStore to handle EventSourcing</param>
            <param name="snapshotStore">Snapshot repository</param>
            <param name="eventBus">Event Bus</param>
            <param name="commandStore">The command store.</param>
            <param name="blobStore">The BLOB store.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.GetById``1(System.Guid)">
            <summary>
            Gets an AggregateRoot by id.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="eventSourceId">The event source id.</param>
            <returns>null if the aggrgate does not exist.</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.GetExistingById``1(System.Guid)">
            <summary>
            Gets an AggregateRoot by Id. Fails if does not exist.
            </summary>
            <typeparam name="TAggregateRoot">Aggregate root entity</typeparam>
            <param name="aggregateRootId">Aggregate root ID</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRootNotFoundException">If the aggregate does not exist.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.Set``1">
            <summary>
            Gets the set of all instances of an TAggregateRoot from historical events and snapshot
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.Set(System.Type)">
            <summary>
            Gets the set of all instances of an AggregateRoot type from historical events and snapshot.
            </summary>
            <param name="aggregateRootType">Type of the aggregate root.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.Set">
            <summary>
             Gets the set of all instances of AggregateRoots from historical events and snapshot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.Set(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Mecalux.ITSW.Core.Infrastructure.Events.IEvent,System.Type}})">
            <summary>
             Gets the set of all instances of AggregateRoots from historical events and snapshot
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.Save``1(``0)">
            <summary>
            Saves the aggregate root events into the event store.
            Publishes the aggregate root events in the event bus.
            Saves the aggregate root snapshots into the snapshot store.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoot">The aggregate root.</param>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves the aggregate root events into the event store in one transaction.
            Publishes the aggregate root events in the event bus.
            Saves each aggregate root snapshot into the snapshot store.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoots">The aggregate roots.</param>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.Store``1(``0)">
            <summary>
            Stores the specified aggregate root.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoot">The aggregate root.</param>
            <returns>
            Stored events.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.StoreAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Stores the specified aggregate roots.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoots">The aggregate roots.</param>
            <returns>
            Stored events.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.GetPackages``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the events packages.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoots">The aggregate roots.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.Publish(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the specified events.
            </summary>
            <param name="events">The events.</param>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.PublishAsync(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the specified events asynchronously.
            </summary>
            <param name="events">The events.</param>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.EventPublishException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.LoadFromSnapshot(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot)">
            <summary>
            Loads an aggregate from snapshot.
            </summary>
            <param name="snapshot">The snapshot.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.DomainSnapshotException">Snapshot SourceType not found. Check namespace changes.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.LoadFromEvent(Mecalux.ITSW.Core.Infrastructure.Events.IEvent,System.Type)">
            <summary>
            Loads from event.
            </summary>
            <param name="evt">The evt.</param>
            <param name="aggregateType">Type of the aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveCommand``1(``0)">
            <summary>
            Saves the specified command in ICommandStore.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveCommands(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Saves the commands.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveCommandAsync``1(``0)">
            <summary>
            Saves the command asynchronous.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <param name="command">The command.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveCommandsAsync(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Commands.ICommand})">
            <summary>
            Saves the commands asynchronous.
            </summary>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveBlob(System.String,System.Byte[])">
            <summary>
            Saves the BLOB in IBlobStore.
            </summary>
            <param name="id">The id.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveBlobs(System.Collections.Generic.Dictionary{System.String,System.Byte[]})">
            <summary>
            Saves the blobs in IBlobStore.
            </summary>
            <param name="blobs">The blobs.</param>
            <exception cref="T:System.ArgumentNullException">if blobs dictionary is null.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.DeleteBlob(System.String)">
            <summary>
            Deletes the BLOB.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.DeleteBlobs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes the blobs.
            </summary>
            <param name="blobIds">The BLOB ids.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.GetBlob(System.String)">
            <summary>
            Gets the BLOB. Returns null if blob not found.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveSnapshot(Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot)">
            <summary>
            Saves the snapshot.
            </summary>
            <param name="aggregateRoot">The aggregate root.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveSnapshots``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves the snapshots.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoots">The aggregate roots.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveSnapshotsAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Saves the snapshots asynchronous.
            </summary>
            <typeparam name="TAggregateRoot">The type of the aggregate root.</typeparam>
            <param name="aggregateRoots">The aggregate roots.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.SaveSnapshotAsync(Mecalux.ITSW.Core.Infrastructure.Domain.IAggregateRoot)">
            <summary>
            Saves the snapshot asynchronous.
            </summary>
            <param name="aggregate">The aggregate.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.TakeSnapshots(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator},System.Threading.CancellationToken)">
            <summary>
            Takes the snapshots.
            </summary>
            <param name="aggregateRoots">The aggregate roots.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.TakeSnapshotsAsync(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator},System.Threading.CancellationToken)">
            <summary>
            Takes the snapshots asynchronous.
            </summary>
            <param name="aggregateRoots">The aggregate roots.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.GetSnapshot(System.Guid)">
            <summary>
            Gets the snapshot.
            </summary>
            <param name="snapshotOriginatorId">The snapshot originator identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.StoreSucceeded``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tries to detect if previous store operation actually succeeded.If it is
            uncertain wheter it succeeded, it will return false.
            </summary>
            <typeparam name="TAggregateRoot"></typeparam>
            <param name="aggregateRoots">Aggregates that had to be stored</param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.DomainRepository.BlobStore">
            <summary>
            Gets the BLOB store.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWork">
            <summary>
            Domain unit of work
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWork.Commit">
            <summary>
            Saves all instances (Blobs, Commands and Aggregates).
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWork.Commit(Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode)">
            <summary>
            Commits the specified mode.
            </summary>
            <param name="mode">The mode.</param>
            <returns>Committed events</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWork.Rollback">
            <summary>
            Rollbacks this instance.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWork.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWork.DirtyInstances">
            <summary>
            Gets the dirty instances.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkRetry">
            <summary>
            Unit of work that handles retries on a special way
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkRetry.CommitRetry(Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode)">
            <summary>
            Commits the specified mode. If the commit actually succeeded on previous attempts,
            it does nothing.
            </summary>
            <param name="mode">The mode.</param>
            <returns>Committed events</returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode">
            <summary>
            Commit mode
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode.StorePublishSnapshotAsync">
            <summary>
            Store, publish and take snapshots asynchronous
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode.StorePublishSnapshot">
            <summary>
            Store, publish and take snapshots synchronous
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode.StorePublish">
            <summary>
            Store and publish
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode.StoreSnapshotAsync">
            <summary>
            Store and take snapshots asynchronous
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode.StoreSnapshot">
            <summary>
            Store and take snapshots synchronous
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode.Store">
            <summary>
            Store only
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode.PackagesPublish">
            <summary>
            The get packages
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory">
            <summary>
            IUnitOfWork factory interface.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory.CreateContext(Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository)">
            <summary>
            Creates a new context.
            </summary>
            <param name="repository">The repository.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory.CreateCorrelatedContext(Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository,System.String)">
            <summary>
            Creates a new correlated context.
            </summary>
            <param name="repository">The repository.</param>
            <param name="correlationId">The correlation id.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory.SetCurrentCorrelatedContext(System.String)">
            <summary>
            Sets and gets the actual correlated context.
            </summary>
            <param name="correlationId">The correlation id.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory.UnSetCurrentContext">
            <summary>
            Unsets current context
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory.DisposeCorrelatedContext(System.String)">
            <summary>
            Disposes the correlated context.
            </summary>
            <param name="correlationId">The correlation identifier.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.IUnitOfWorkFactory.ExistsCorrelatedContext(System.String)">
            <summary>
            Existses the correlated context.
            </summary>
            <param name="correlationId">The correlation identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork">
            <summary>
            Domain UnitOfWork class
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.#ctor(Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork"/> class.
            </summary>
            <param name="domainRepository">The domain repository to use in this unit of work.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="domainRepository"/> is null.</exception>
            /// <exception cref="T:System.InvalidOperationException">If UnitOfWork.Current is not null.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.#ctor(Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository,System.String)">
            <summary>
            Initializes a new correlated instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork"/> class.
            </summary>
            <param name="domainRepository">The domain repository.</param>
            <param name="correlationId">The correlation id.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.SetCurrent">
            <summary>
            Sets the current.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.UnsetCurrent">
            <summary>
            Sets current to null.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.Commit">
            <summary>
            Saves dirty instances (Blobs, Commands and Aggregates( Event store, Event publish, Snapshot store)).
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.Commit(Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode)">
            <summary>
            Saves dirty instances (Blobs, Commands and Aggregates).
            </summary>
            <param name="mode">The aggregate save mode.</param>
            <returns>Committed events</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.CommitRetry(Mecalux.ITSW.Core.Infrastructure.Domain.CommitMode)">
            <summary>
            Commits the specified mode. If the commit actually succeeded on previous attempts,
            it does nothing. Only Store mode is supported.
            </summary>
            <param name="mode">The mode.</param>
            <returns>Committed events</returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.SetSavePoint(System.String)">
            <summary>
            Creates a save point by the given name.
            </summary>
            <param name="savePointName">Name of the save point</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.RollbackTo(System.String)">
            <summary>
            Rollsback to the given save point.
            </summary>
            <param name="savePointName">Name of the save point</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.Rollback">
            <summary>
            Rollbacks the changes in the instance (Blobs, Commands and Aggregates).
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.RegisterDirtyInstance(Mecalux.ITSW.Core.Infrastructure.Domain.AggregateRoot,Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Registers the modified AggregateRoot.
            </summary>
            <param name="dirtyInstance">The dirty instance.</param>
            <param name="event">Event that has been applied to the aggregate or one of its entities and thus makes
            the aggregate dirty.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.FindDirtyInstance(System.Guid)">
            <summary>
            Finds a modified AggregateRoot. Returns null if not found.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.RegisterCommandDirtyInstance(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Registers the command new instance.
            </summary>
            <param name="dirtyInstance">The dirty instance.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.RegisterBlobNewInstance(System.String,System.Byte[])">
            <summary>
            Registers the new BLOB instance.
            </summary>
            <param name="id">The id.</param>
            <param name="blob">The BLOB.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.RegisterBlobDeletedInstance(System.String)">
            <summary>
            Registers the delete BLOB.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.FindBlobNewInstance(System.String)">
            <summary>
            Finds the BLOB new instance. Returns null if not found.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.IsBlobDeletedInstance(System.String)">
            <summary>
            Determines whether BLOB instance is registed for deletion.
            </summary>
            <param name="id">The id.</param>
            <returns>
              <c>true</c> if [is BLOB deleted instance] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.RegisterEventInstance(Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Registers the event instance to publish it on commit.
            </summary>
            <param name="eventInstance">The event instance.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.RegisterOperationInstance(Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent)">
            <summary>
            Registers the operation instance to publish it on commit.
            </summary>
            <param name="eventInstance">The event instance.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.Current">
            <summary>
            Gets the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork"/> that is associated with the current thread.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.IsCorrelated">
            <summary>
            Gets a value indicating whether this instance is shared between threads.
            </summary>
            <value>
            	<c>true</c> if this instance is correlated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.DomainRepository">
            <summary>
            Gets the domain repository.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWork.DirtyInstances">
            <summary>
            Gets the dirty instances.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWorkFactory">
            <summary>
            IDomainRepository UnitOfWork factory.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWorkFactory.CreateContext(Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository)">
            <summary>
            Creates the context.
            </summary>
            <returns>A IUnitOfWork object</returns>
            <exception cref="T:System.InvalidOperationException">If UnitOfWork.Current is not null.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="repository"/> is null.</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWorkFactory.CreateCorrelatedContext(Mecalux.ITSW.Core.Infrastructure.Domain.IDomainRepository,System.String)">
            <summary>
            Creates a new correlated context.
            </summary>
            <param name="repository">The repository.</param>
            <param name="correlationId">The correlation id.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWorkFactory.UnSetCurrentContext">
            <summary>
            Unsets current context
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWorkFactory.SetCurrentCorrelatedContext(System.String)">
            <summary>
            Sets and gets the actual correlated context.
            </summary>
            <param name="correlationId">The correlation id.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWorkFactory.DisposeCorrelatedContext(System.String)">
            <summary>
            Disposes the correlated context.
            </summary>
            <param name="correlationId">The correlation identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Domain.UnitOfWorkFactory.ExistsCorrelatedContext(System.String)">
            <summary>
            Existses the correlated context.
            </summary>
            <param name="correlationId">The correlation identifier.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus">
            <summary>
            Local/InMemory event bus
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus"/> class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscriptionStore,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus"/> class.
            </summary>
            <param name="subscriptionStore">The subscription store.</param>
            <param name="subscriptionName">Name of the subscription.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.#ctor(Mecalux.ITSW.Core.Infrastructure.Bus.LocalBusSubscriptionStore,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus"/> class.
            </summary>
            <param name="subscriptionStore">The subscription store.</param>
            <param name="subscriptionName">Name of the subscription.</param>
            <param name="allowReceive">if set to <c>true</c> [allow receive].</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.Publish(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the specified event.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.Publish(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the specified events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.PublishAsync(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the event asynchronously.
            </summary>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.PublishAsync(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the events asynchronously.
            </summary>
            <param name="events">The events.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.PublishRetry(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the specified event on the bus subscription.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.PublishRetry(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the specified events on the bus subscription.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.PublishAsyncRetry(Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent})">
            <summary>
            Publishes the event on the bus subscription asynchronously.
            </summary>
            <param name="event">The event.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.PublishAsyncRetry(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Bus.Envelope{Mecalux.ITSW.Core.Infrastructure.Events.IEvent}})">
            <summary>
            Publishes the events on the bus subscription asynchronously.
            </summary>
            <param name="events">The events.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.RegisterHandler(Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler)">
            <summary>
            Registers the handler.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.RegisterHandler``1(Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler{``0})">
            <summary>
            Registers the handler.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.UnregisterHandlers``1">
            <summary>
            Unregisters the handlers.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.UnregisterHandlers(System.Type)">
            <summary>
            Unregisters the handlers.
            </summary>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.UnregisterHandlers(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Unregisters the handler matching the condition.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandlerCondition">The event handler condition.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.UnregisterHandlers(System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Unregisters the handlers that meet the condition.
            </summary>
            <param name="eventHandlerCondition">The event handler condition.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.IsRegistered``1">
            <summary>
            Determines whether this instance is registered.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified event type is registered.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Bus.LocalEventBus.IsRegistered(System.Type,System.Func{Mecalux.ITSW.Core.Infrastructure.Events.Handling.IEventHandler,System.Boolean})">
            <summary>
            Determines whether the specified event type and event handler is registered.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="eventHandlerCondition">The event handler condition.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventSerializer">
            <summary>
            An interface for a EventSerializer
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventSerializer.Serialize(Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Serializes the specified an event.
            </summary>
            <param name="anEvent">An event.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedDomainEvent">The serialized domain event.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStoreRetry">
            <summary>
            Methods related to retry operations on event store
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStoreRetry.IsEventArchived(System.Guid)">
            <summary>
            Returns true if there is an event by the given id on the
            archive table.
            </summary>
            <param name="eventId">Event id</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStoreRetry.IsEventStored(System.Guid)">
            <summary>
            Returns true if there is an event by the given id on the events table
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStoreRetry.GetEvent(System.Guid)">
            <summary>
            Returns the event with the specified id
            </summary>
            <param name="eventId">Event id</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no event is found by the given id</exception>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStoreRetry.IsStoreArchiveAtomic">
            <summary>
            True if store and archive operation is atomic, false otherwise
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStoreArch">
            <summary>
            Event store with arch store
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStoreArch.EventsArchiveEnabled">
            <summary>
            Gets or sets a value indicating whether events archive is enabled.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.IEventStoreArch.EventsRemoveSnapshotted">
            <summary>
            Gets or sets a value indicating whether snapshotted events are archived or removed.
            Removed if EventsArchiveEnabled is not enabled (false)
            Archvived if EventsArchiveEnabled is enabled (true)
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore">
            <summary>
            In memory event store class.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.GetEvents(System.Guid,System.Int64)">
            <summary>
            Gets the events.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <param name="startSequence">The start sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.GetEvents(System.Guid,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets the events.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <param name="dateFrom">The date from.</param>
            <param name="dateTo">The date to.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.GetCommandEvents(System.Guid)">
            <summary>
            Gets the command events.
            </summary>
            <param name="commandId">The command identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.GetCorrelationEvents(System.String)">
            <summary>
            Gets the correlation events.
            </summary>
            <param name="correlationId">The correlation identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.Store(Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource)">
            <summary>
            Stores the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource})">
            <summary>
            Stores the specified sources.
            </summary>
            <param name="sources">The sources.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource},System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource})">
            <summary>
            Stores and archives the specified sources.
            </summary>
            <param name="archiveSources">The sources that should be archived.</param>
            <param name="storeSources">The sources that should be stored.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.IPackageEvent})">
            <summary>
            Stores the specified events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.GetUnSnapshootedEvents(System.Type)">
            <summary>
            Gets the un snapshooted events.
            </summary>
            <param name="aggregateRootType">Type of the aggregate root.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.GetUnSnapshootedEvents">
            <summary>
            Gets the un snapshooted events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.SetSnapshotted(Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource)">
            <summary>
            Sets the snapshotted.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.SetSnapshotted(System.Guid,System.Int64)">
            <summary>
            Sets the snapshotted.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <param name="sourceLastEventSequence">The source last event sequence.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.Archive(Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource)">
            <summary>
            Archives the specified source.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemoryEventStore.Archive(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Domain.IEventSource})">
            <summary>
            Archives the specified sources.
            </summary>
            <param name="sources">The sources.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore">
            <summary>
            In memory snapshot store
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore">
            <summary>
            A Snapshot store. Can store and retrieve a <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.Snapshot"/>.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.GetSnapshot(System.Guid)">
            <summary>
            Gets the snapshot by source id.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.GetSnapshots(System.Type)">
            <summary>
            Gets the snapshots.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.GetSnapshots">
            <summary>
            Gets the snapshots.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.GetSnapshots(System.Int32,System.Int32)">
            <summary>
            Gets the snapshots.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.GetSnapshotsEnumerator">
            <summary>
            Gets the snapshots enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.GetSnapshotsEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets the snapshots enumerator.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.GetSnapshotsCount">
            <summary>
            Gets the snapshots count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.Store(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot)">
            <summary>
            Stores (Add or Update) the specified snapshot.
            </summary>
            <param name="snapshot">The snapshot.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot})">
            <summary>
            Stores the specified snapshots.
            </summary>
            <param name="snapshots">The snapshots.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.Insert(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot})">
            <summary>
            Inserts the specified snapshots. Fails if snapshot exists with same source id.
            </summary>
            <param name="snapshots">The snapshots.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.DeleteSnapshot(System.Guid)">
            <summary>
            Deletes the snapshot.
            </summary>
            <param name="sourceId">The source identifier.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotStore.DeleteSnapshots(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes the snapshots.
            </summary>
            <param name="sourceIds">The source ids.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.GetSnapshot(System.Guid)">
            <summary>
            Gets a snapshot of a particular source, if one exists. Otherwise, returns <c>null</c>.
            </summary>
            <param name="sourceId">The source aggregate id.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.GetSnapshots(System.Type)">
            <summary>
            Gets the snapshots.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.GetSnapshots">
            <summary>
            Gets all the snapshots.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.GetSnapshotsEnumerator">
            <summary>
            Gets the snapshots enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.GetSnapshots(System.Int32,System.Int32)">
            <summary>
            Gets the snapshots.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.GetSnapshotsEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets the snapshots enumerator.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.GetSnapshotsCount">
            <summary>
            Gets the snapshots count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.Store(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot)">
            <summary>
            Saves a snapshot of the specified event source. If a previous snapshot exists it will be overrited.
            </summary>
            <param name="snapshot">The snapshot.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot})">
            <summary>
            Stores the specified snapshots.
            </summary>
            <param name="snapshots">The snapshots.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.Insert(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot})">
            <summary>
            Inserts the specified snapshots. Fails if snapshot exists with same source id.
            </summary>
            <param name="snapshots">The snapshots.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.DeleteSnapshot(System.Guid)">
            <summary>
            Deletes the snapshot.
            </summary>
            <param name="sourceId">The source id.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.InMemorySnapshotStore.DeleteSnapshots(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes the snapshots.
            </summary>
            <param name="sourceIds">The source ids.</param>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator">
            <summary>
            Interface to mark Aggregate roots that _MUST_ take snapshots
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator.CreateSnapshot">
            <summary>
            Creates the snapshot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator.SetSnapshot(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot)">
            <summary>
            Sets the snapshot.
            </summary>
            <param name="snapshot">The snapshot.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator.ShouldTakeSnapshot(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot)">
            <summary>
            Shoulds the take snapshot.
            </summary>
            <param name="previousSnapshot">The previous snapshot.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator.ShouldDeleteSnapshot">
            <summary>
            Shoulds the delete snapshot.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator.Id">
            <summary>
            Gets the identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator.LastEventSequence">
            <summary>
            Gets the last event sequence.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator2">
            <summary>
            Interface to mark Aggregate roots that _MUST_ take snapshots
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator2.ShouldTakeSnapshot">
            <summary>
            Returns whether or not an aggregate snapshot should be taken.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot">
            <summary>
            Represents a full state of an <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator"/>
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot.SourceId">
            <summary>
            Gets or sets the source identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot.SourceLastEventSequence">
            <summary>
            Gets or sets the source last event sequence.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore">
            <summary>
            Snapshot store that does nothing.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.GetSnapshot(System.Guid)">
            <summary>
            Gets the snapshot by source id.
            </summary>
            <param name="sourceId">The source identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.GetSnapshots(System.Type)">
            <summary>
            Gets the snapshots.
            </summary>
            <param name="sourceType">Type of the source.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.GetSnapshots">
            <summary>
            Gets the snapshots.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.Store(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot)">
            <summary>
            Stores (Add or Update) the specified snapshot.
            </summary>
            <param name="snapshot">The snapshot.</param>
            <exception cref="T:System.NotImplementedException">NullSnapshotStore do not save snapshots</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.Store(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot})">
            <summary>
            Stores the specified snapshots.
            </summary>
            <param name="snapshots">The snapshots.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.Insert(System.Collections.Generic.IEnumerable{Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshot})">
            <summary>
            Inserts the specified snapshots. Fails if snapshot exists with same source id.
            </summary>
            <param name="snapshots">The snapshots.</param>
            <exception cref="T:System.NotImplementedException">NullSnapshotStore do not save snapshots</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.DeleteSnapshot(System.Guid)">
            <summary>
            Deletes the snapshot.
            </summary>
            <param name="sourceId">The source identifier.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.DeleteSnapshots(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes the snapshots.
            </summary>
            <param name="sourceIds">The source ids.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.GetSnapshotsEnumerator">
            <summary>
            Gets the snapshots enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.GetSnapshots(System.Int32,System.Int32)">
            <summary>
            Gets the snapshots.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.GetSnapshotsEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets the snapshots enumerator.
            </summary>
            <param name="skip">The skip.</param>
            <param name="take">The take.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.NullSnapshotStore.GetSnapshotsCount">
            <summary>
            Gets the snapshots count.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.Snapshot">
            <summary>
            SnapShot information. Holds the full state of an aggregate root at a certain version.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Events.Storage.Snapshot.#ctor(Mecalux.ITSW.Core.Infrastructure.Events.Storage.ISnapshotOriginator)">
            <summary>
            Initializes SourceId, LastEventSequence and SourceType properties of the <see cref="T:Mecalux.ITSW.Core.Infrastructure.Events.Storage.Snapshot"/> class.
            </summary>
            <param name="originator">The originator.</param>
            <exception cref="T:System.ArgumentNullException">If originator is null.</exception>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.Snapshot.SourceId">
            <summary>
            Gets or sets the source aggregate id.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.Snapshot.SourceLastEventSequence">
            <summary>
            Gets the last event sequence at which the snapshot applies.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.Events.Storage.Snapshot.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext">
            <summary>
            The Infrastructure Environment.
            Sets the configuration for global interfaces: ICommandBus, ICommandValidationBus, IEventBus, IDomainRepositoryFactory, IUnitOfWorkFactory, ITenantResolver.
            And DomainRepository interfaces: IEventStore, ISnapshotStore, ICommandStore and IBlobStore.
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.DefaultTypeName">
            <summary>
            Identifies the default type name to configured objects
            </summary>
        </member>
        <member name="F:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.defaults">
            <summary>
            Default objects for non configured types.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.SetDefaultConfig">
            <summary>
            Initialize default types with default objects.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.Set``1(``0)">
            <summary>
            Sets the default instance. For any global types: ICommandBus, ICommandValidationBus, IDomainRepositoryFactory, IUnitOfWorkFactory.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.Set``1(``0,System.String)">
            <summary>
            Sets the default for the specified name. For any repository dependences: IEventStore, ISnapshotStore and ICommandStore.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.Get``1">
            <summary>
            Gets the configured default instance for a type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.Get``1(System.String)">
            <summary>
            Gets the specified type for one repositoty name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <returns></returns>
            <exception cref="T:Mecalux.ITSW.Core.Abstraction.Exceptions.ServiceResolutionException"></exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.TryGet``1(System.String)">
            <summary>
            Tries to get the specified type for one name. Returns 'null' if not available.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.SetDefaultConfiguration">
            <summary>
            Deconfigures the Infrastructure Environment. Default types will be used.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.RegisterHandlers(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Registers the handlers on event, command and validation command buses.
            </summary>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.SetCurrentTenant(System.Guid)">
            <summary>
            Sets the current thread tenant identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.SetCurrentTenant(System.Guid,System.Boolean)">
            <summary>
            Sets the current thread tenant identifier.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="checkDisabled">if set to <c>true</c> [check disabled].</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Tenant is disabled</exception>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.DisableTenant(System.Guid)">
            <summary>
            Disables the tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.EnableTenant(System.Guid)">
            <summary>
            Enables the tenant.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.IsDisabledTenant(System.Guid)">
            <summary>
            Determines whether the tenant is disabled.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.SetCurrentCommandInfo(Mecalux.ITSW.Core.Infrastructure.Commands.ICommandInfo)">
            <summary>
            Sets the current command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.SetCurrentCommandInfo(System.Guid,System.String,System.String,System.String)">
            <summary>
            Sets the current command.
            </summary>
            <param name="commandId">The command identifier.</param>
            <param name="commandName">Name of the command.</param>
            <param name="operationName">Name of the operation.</param>
            <param name="module">The module.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.SetCurrentProcessInfo(Mecalux.ITSW.Core.Infrastructure.Processes.IProcessInfo)">
            <summary>
            Sets the current process information.
            </summary>
            <param name="processInfo">The process information.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.RegisterEvent(Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Registers the event instance to be published on commit.
            </summary>
            <param name="eventInstance">The event instance.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.RegisterOperation(Mecalux.ITSW.Core.Infrastructure.Operations.IOperationEvent)">
            <summary>
            Registers the operation event instance to be published on commit.
            </summary>
            <param name="eventInstance">The event instance.</param>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.IsConfigured">
            <summary>
            Gets a value indicating whether this environment is configured (has some default overwrited).
            </summary>
            <value>
            	<c>true</c> if this environment is configured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.TenantId">
            <summary>
            Gets the thread tenant identifier.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.CommandInfo">
            <summary>
            Gets the thread command information.
            </summary>
        </member>
        <member name="P:Mecalux.ITSW.Core.Infrastructure.InfrastructureContext.ProcessInfo">
            <summary>
            Gets the thread process information.
            </summary>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryEventSerializer">
            <summary>
            Binary Event Serializer
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryEventSerializer.Serialize(Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Serializes the specified domain event.
            </summary>
            <param name="domainEvent">The domain event.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Binary.BinaryEventSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedDomainEvent">The serialized domain event.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonCommandSerializer">
            <summary>
            Json ICommand serializer
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonCommandSerializer.Serialize(Mecalux.ITSW.Core.Infrastructure.Commands.ICommand)">
            <summary>
            Serializes the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonCommandSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedCommand">The serialized command.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonEventSerializer">
            <summary>
            Json IEvent serilizer
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonEventSerializer.Serialize(Mecalux.ITSW.Core.Infrastructure.Events.IEvent)">
            <summary>
            Serializes the specified domain event.
            </summary>
            <param name="domainEvent">The domain event.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonEventSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedDomainEvent">The serialized domain event.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonObjectSerializer">
            <summary>
            Json object serializer.
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonObjectSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified value to a string.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonObjectSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes an object graph to a text reader.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonObjectSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializes the specified target type from a string.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="serializedValue">The serialized value.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Serialization.Json.JsonObjectSerializer.Deserialize(System.Type,System.IO.TextReader)">
            <summary>
            Deserializes an object graph from the specified text reader.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager">
            <summary>
            A wrapper for tenant resource managers
            </summary>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager.SetTenantResourceManager(System.Guid,System.Resources.ResourceManager)">
            <summary>
            Sets the tenant resource manager.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="resourceManager">The resource manager.</param>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager.ContainsKey(System.Guid)">
            <summary>
            Determines whether the specified tenant identifier contains key.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager.GetString(System.String)">
            <summary>
            Returns the value of the specified <see cref="T:System.String" /> resource.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The value of the resource localized for the caller's current culture settings. If a match is not possible, null is returned.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the <see cref="T:System.String" /> resource localized for the specified culture.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is localized. Note that if the resource is not localized for this culture, the lookup will fall back using the current thread's <see cref="P:System.Globalization.CultureInfo.Parent" /> property, stopping after looking in the neutral culture.If this value is null, the <see cref="T:System.Globalization.CultureInfo" /> is obtained using the current thread's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</param>
            <returns>
            The value of the resource localized for the specified culture. If a best match is not possible, null is returned.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager.GetObject(System.String)">
            <summary>
            Returns the value of the specified <see cref="T:System.Object" /> resource.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <returns>
            The value of the resource localized for the caller's current culture settings. If a match is not possible, null is returned. The resource value can be null.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value of the <see cref="T:System.Object" /> resource localized for the specified culture.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> object that represents the culture for which the resource is localized. Note that if the resource is not localized for this culture, the lookup will fall back using the culture's <see cref="P:System.Globalization.CultureInfo.Parent" /> property, stopping after checking in the neutral culture.If this value is null, the <see cref="T:System.Globalization.CultureInfo" /> is obtained using the culture's <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</param>
            <returns>
            The value of the resource, localized for the specified culture. If a "best match" is not possible, null is returned.
            </returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager.GetString(System.Guid,System.String)">
            <summary>
            Gets the string.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager.GetString(System.Guid,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the string.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="name">The name.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager.GetObject(System.Guid,System.String)">
            <summary>
            Gets the object.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.ITSW.Core.Infrastructure.Tenants.TenantResourceManager.GetObject(System.Guid,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the object.
            </summary>
            <param name="tenantId">The tenant identifier.</param>
            <param name="name">The name.</param>
            <param name="culture">The culture.</param>
            <returns></returns>
        </member>
    </members>
</doc>
